[{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.1-blog1/","title":"Blog 1","tags":[],"description":"","content":"OpenAI open weight models now available on AWS On August 5, 2025, AWS announced that two of OpenAI’s latest open-weight models — gpt-oss-120b and gpt-oss-20b — are now accessible through Amazon Bedrock and Amazon SageMaker JumpStart. This release marks a significant milestone, as it’s the first time OpenAI has provided public access to model weights since GPT-2, opening the door to greater flexibility and customization.\nTask Specialization The new OpenAI open-weight models are designed with specific use cases in mind. They excel at coding tasks, scientific data analysis, and mathematical reasoning, making them well-suited for industries and teams that require advanced technical problem-solving capabilities.\nExtended Context Both models support an expanded context window of 128,000 tokens. This allows them to process very long documents, conversations, or codebases in a single run. For applications involving legal analysis, research papers, or extended dialogues, this large context size provides a clear advantage.\nDeployment Options AWS offers two main paths for deploying these models. With Amazon Bedrock, customers can access the models as a fully managed service, avoiding the need to handle infrastructure. On the other hand, SageMaker JumpStart allows for more hands-on control, enabling exploration, deployment, and fine-tuning either through SageMaker Studio or the Python SDK. This dual approach caters to both convenience and flexibility, depending on the user’s preference.\nSecurity Controls Security remains central to AWS’s offering. Customers can deploy models within a private VPC, ensuring data isolation and stronger protection. AWS also provides Guardrails to help organizations maintain responsible use of AI by filtering outputs, applying compliance rules, and preventing harmful responses. These built-in controls give businesses more confidence in deploying open-weight models safely.\nPerformance Claims According to AWS, the gpt-oss-120b model delivers significant efficiency gains when run on Bedrock. The company claims it is three times more cost-efficient than Gemini, five times more efficient than DeepSeek-R1, and twice as efficient as OpenAI’s own o4 model. While these benchmarks are impressive, they are based on AWS’s internal testing. As with any marketing claim, organizations are advised to validate performance against their own workloads before relying on these figures.\nTransparency with Chain-of-Thought Another notable capability is the option to output chain-of-thought reasoning traces. This feature allows users to see the step-by-step reasoning process behind a model’s response. For applications requiring explainability or verification, this can be a valuable tool. However, in practice, such reasoning outputs may add complexity and not always be suitable for all production environments.\nLimitations and Considerations Despite their potential, the models come with certain limitations. At launch, they are only available in a few AWS regions: US West (Oregon) for Bedrock, and US East (Ohio, Virginia) as well as Asia (Mumbai, Tokyo) for SageMaker JumpStart. This restricted availability may slow adoption for organizations operating in other parts of the world.\nAdditionally, while open weights allow for deep customization and fine-tuning, they also shift responsibility onto the user. Businesses must take care to implement proper safety measures, manage compliance requirements, and guard against misuse. In short, the openness of the models provides freedom but demands responsibility.\nConclusion The release of OpenAI’s gpt-oss-120b and gpt-oss-20b on AWS represents a major step in the evolution of AI accessibility. By combining advanced reasoning capabilities, extended context handling, and open-weight customization with the convenience of Bedrock and the flexibility of SageMaker, AWS is positioning itself as a powerful platform for AI innovation.\nHowever, I think customers should remain cautious. Regional limitations, marketing-heavy performance claims, and the added responsibilities of managing open weights all require careful consideration. With proper validation and governance, these models could become valuable assets for organizations seeking both transparency and control in their AI systems.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.2-blog2/","title":"Blog 2","tags":[],"description":"","content":"OpenSecrets uses AWS to transform political transparency through enhanced data matching OpenSecrets is a nonpartisan, independent nonprofit organization whose mission is to serve as the trusted authority on money in American politics. It pursues this mission by providing comprehensive and reliable data, analysis, and tools for policymakers, storytellers, and citizens. Its vision is for Americans to use data on money in politics to create a more vibrant, representative, and responsive democracy.\nThrough the AWS Imagine Grant—a public grant program that provides both cash and Amazon Web Services (AWS) credit funding to registered nonprofit organizations that are using cloud technology to accelerate their missions—OpenSecrets embarked on an ambitious project to revolutionize its political contribution database. The project focused on enhancing donor matching accuracy and efficiency through advanced data processing techniques. The improved system empowers more citizens and organizations to hold political systems accountable by making political finance data more accurate and accessible than ever before.\nWrestling with inconsistent political data Political contribution data arrives from multiple sources with varying formats, naming conventions, and data quality standards. This created a massive challenge for researchers, journalists, and citizens trying to track money in politics accurately.\nThe complexity of political finance data The challenge begins with the sheer diversity of data sources. Federal Election Commission (FEC) filings arrive in different formats, state election commissions each have their own reporting standards, and lobbying disclosure forms follow yet another set of conventions. Individual donors might be listed as \u0026ldquo;John Smith,\u0026rdquo; \u0026ldquo;J. Smith,\u0026rdquo; \u0026ldquo;John A. Smith,\u0026rdquo; or \u0026ldquo;Smith, John\u0026rdquo; across different filings, making it nearly impossible to track their complete contribution history without sophisticated matching algorithms.\nCorporate entities present an even greater challenge. A single company might appear in records under its full legal name, common trade name, various subsidiary names, or even through different political action committees (PACs). For example, a technology company might contribute through \u0026ldquo;ABC Corp,\u0026rdquo; \u0026ldquo;ABC Corporation,\u0026rdquo; \u0026ldquo;ABC Technology Solutions,\u0026rdquo; or \u0026ldquo;ABC PAC,\u0026rdquo; making it difficult to aggregate the true scope of corporate political influence.\nManual processes reaching breaking point The OpenSecrets team was spending disproportionate amounts of time cleaning and reconciling data rather than analyzing it for meaningful insights. Staff members would manually review potential matches, cross-reference names across databases, and verify identities through public records—a process that could take hours for complex cases involving common names or large corporate entities.\nThis manual process was not only time-intensive, but also prone to human error—potentially compromising the accuracy of the organization\u0026rsquo;s data. A single misidentified donor could skew analysis of contribution patterns, while missed connections between entities could obscure important relationships in political financing networks.\nThe challenge was particularly urgent because political finance data grows exponentially during election cycles. During the 2024 election cycle, for instance, OpenSecrets processed over 500 million contribution records, compared to roughly 200 million during off-year periods. Manual processing was becoming increasingly unsustainable as both the volume and velocity of incoming data continued to accelerate.\nThe stakes of data accuracy Without an automated solution, OpenSecrets risked falling behind in its mission to provide timely, accurate information about campaign funding and lobbying activities. Inaccurate or incomplete data could mislead journalists writing investigative stories, researchers conducting academic studies, or citizens trying to understand their representatives\u0026rsquo; funding sources.\nThe organization needed a system that could handle hundreds of millions of records while maintaining the high precision standards required for political transparency work. False positives in donor matching could incorrectly attribute contributions, while false negatives could hide important patterns of political influence—both scenarios undermining the organization\u0026rsquo;s credibility and mission.\nBuilding a scalable data matching solution OpenSecrets initially proposed using machine learning for entity resolution, but as the project progressed, the team shifted to a more deterministic approach that better served their specific needs. They decided to use AWS-hosted Snowflake for data processing and AWS-hosted Elasticsearch for entity matching and scoring.\nFrom machine learning to deterministic matching The initial machine learning approach, while technically sophisticated, presented several challenges for OpenSecrets\u0026rsquo; specific use case. Black box algorithms made it difficult for staff to understand why certain matches were made, creating trust issues when explaining methodology to external researchers and journalists. Additionally, the training data requirements for ML models were substantial, and the organization needed results that could be audited and explained to maintain credibility in political transparency work.\nThe shift to a deterministic, rule-based approach provided several key advantages:\nTransparency: Every matching decision could be traced back to specific rules and scoring criteria Explainability: Staff could articulate to external users exactly how matches were determined Flexibility: Rules could be adjusted based on domain expertise without retraining models Speed: Deterministic algorithms could process records faster than complex ML inference Technical architecture and AWS services Running both Snowflake and Elasticsearch on AWS provided OpenSecrets with the scalability, speed, and centralized infrastructure necessary to handle its massive datasets. The architecture leveraged several key AWS services:\nAmazon EC2 instances powered the Elasticsearch clusters, providing the computational resources needed for real-time search and matching operations. The team configured auto-scaling groups to handle varying workloads during peak processing periods, such as FEC filing deadlines when thousands of new records might arrive simultaneously.\nAmazon S3 served as the primary data lake, storing raw contribution files, processed datasets, and backup copies of historical data. The team implemented lifecycle policies to automatically transition older data to cheaper storage classes while maintaining accessibility for historical analysis.\nAWS Lambda functions handled data preprocessing tasks, cleaning incoming files and standardizing formats before they entered the main processing pipeline. This serverless approach allowed the team to process incoming data streams without maintaining dedicated infrastructure.\nAmazon RDS provided relational database services for storing processed results and maintaining reference tables for name standardization and entity relationships.\nElasticsearch implementation details The Elasticsearch implementation formed the heart of the matching system. The team created sophisticated indexing strategies that enabled fuzzy matching across multiple fields simultaneously. Key features included:\nPhonetic matching using Soundex and Metaphone algorithms to catch name variations like \u0026ldquo;Smith\u0026rdquo; vs \u0026ldquo;Smyth\u0026rdquo; or \u0026ldquo;Catherine\u0026rdquo; vs \u0026ldquo;Katherine.\u0026rdquo;\nNormalized scoring that weighted different types of matches based on their reliability. Exact Social Security Number matches received the highest scores, while fuzzy name matches were weighted based on the rarity of the name and the quality of supporting information.\nGeographic clustering that increased match confidence when donors shared addresses, ZIP codes, or employer information, helping distinguish between different individuals with common names.\nData processing workflow The AWS infrastructure allowed researchers and the tech team to process hundreds of millions of records efficiently while maintaining the flexibility to adapt their approach as they learned more about their data challenges. The complete workflow involved several stages:\nData ingestion: Raw files uploaded to S3 triggers Lambda functions for initial processing Normalization: Names, addresses, and employer information standardized using reference databases Elasticsearch indexing: Processed records indexed with multiple search strategies Matching execution: Batch jobs run matching algorithms across the entire dataset Scoring and ranking: Potential matches scored and ranked by confidence level Human review queue: Low-confidence matches flagged for manual verification Result storage: Confirmed matches stored in RDS for subsequent analysis The approach they ultimately chose offered several advantages over their original machine learning proposal. It provided faster development cycles, transparent logic that their team could understand and explain, and the ability to score and rank potential matches. This scoring system allows uncertain results to be flagged for human review, allowing the automated process to enhance—rather than replace—human expertise.\nPerformance optimizations The team implemented several performance optimizations to handle the scale of political finance data:\nParallel processing distributed matching tasks across multiple Elasticsearch nodes, reducing processing time from weeks to days for complete dataset refresh.\nIncremental updates allowed new records to be matched against existing data without reprocessing the entire database, enabling near real-time updates during active filing periods.\nCaching strategies stored frequently accessed results in Amazon ElastiCache, reducing response times for common queries and dashboard updates.\nTransforming political finance research The new system matches hundreds of millions of records with greater accuracy, automating entity resolution while flagging records with insufficient confidence for human review. This leap in data processing improves the quality of key public datasets, allowing researchers to focus on analysis rather than data cleaning, and enabling deeper insights into campaign funding and lobbying at the federal and state levels.\nQuantifiable improvements in data quality The transformation delivered measurable improvements across multiple dimensions of data quality:\nMatch accuracy increased by 85% compared to the previous manual process, with false positive rates dropping below 2%. This improvement was particularly notable for corporate entities, where the system successfully identified subsidiary relationships and PAC connections that had previously required hours of manual research.\nProcessing time decreased by 95%, with complete dataset refreshes now taking days rather than months. During peak election periods, the system can process over 100,000 new contribution records daily, compared to the previous capacity of roughly 5,000 records per day through manual processes.\nCoverage completeness improved by 40%, as the automated system could identify subtle connections that human reviewers might miss due to fatigue or time constraints. This includes detecting relationships between donors who use different name variations across multiple election cycles or contribution types.\nEnhanced analytical capabilities The improved data quality unlocked new analytical possibilities that were previously impossible due to data inconsistencies:\nLongitudinal donor tracking now allows researchers to follow individual donors\u0026rsquo; political giving patterns across multiple election cycles, revealing trends in political engagement and allegiance shifts. This capability has already enabled several groundbreaking studies on donor behavior and political polarization.\nCorporate network analysis can map complex relationships between parent companies, subsidiaries, and associated PACs, providing a more complete picture of corporate political influence. The system can automatically identify when a single corporate entity is contributing through multiple channels, helping journalists and researchers understand the true scope of business involvement in politics.\nGeographic clustering analysis reveals regional patterns in political giving, helping researchers understand how local economic conditions, industry presence, and demographic factors influence political contributions. This has proven particularly valuable for studies on the intersection of economic and political power.\nImpact on stakeholder workflows The enhanced data quality enables journalists to write more accurate stories with greater depth and nuance. Reporters can now quickly identify all contributions from a particular individual or corporate network without spending days on manual research. Several Pulitzer Prize-winning investigations have already leveraged the improved OpenSecrets data to expose previously hidden patterns of political influence.\nResearchers to conduct reliable studies with larger sample sizes and greater confidence in their findings. Academic institutions have reported that studies using OpenSecrets data now require significantly less time for data preparation, allowing more resources to be devoted to analysis and interpretation.\nCitizens to make informed decisions about political candidates through more accessible and comprehensive information. The improved data powers user-friendly tools on the OpenSecrets website, including interactive donor maps, contribution timelines, and influence network visualizations that make complex political finance data understandable to general audiences.\nScaling for future growth OpenSecrets\u0026rsquo; transformation supports democracy through increased transparency, while the system\u0026rsquo;s scalability meets growing demands for political transparency tools as it continues to expand for new data sources. The AWS infrastructure can easily accommodate:\nState and local data integration: The system is already processing campaign finance data from 15 additional states, with plans to expand to all 50 states over the next two years. Each new data source requires minimal infrastructure changes, as the flexible architecture can accommodate varying data formats and filing requirements.\nReal-time processing capabilities: During major election cycles, the system can provide near real-time updates as new filings are submitted to election commissions, enabling journalists to report on contribution patterns as they develop rather than waiting for quarterly summaries.\nInternational expansion potential: The underlying technology stack could be adapted to process political finance data from other democratic countries, supporting global transparency initiatives and comparative political research.\nDemocratizing access to political data Perhaps most significantly, the transformation has democratized access to political finance information. Previously, only well-resourced news organizations or academic institutions could afford the staff time required to conduct comprehensive political finance research. Now, smaller news outlets, civic organizations, and individual researchers can access high-quality, processed data through OpenSecrets\u0026rsquo; APIs and bulk download services.\nThis democratization has led to a proliferation of transparency initiatives at local and state levels, as community organizations can now easily analyze their local political funding patterns and hold elected officials accountable for their funding sources.\nLessons for nonprofit technology implementation OpenSecrets\u0026rsquo; experience offers valuable guidance for other nonprofits embarking on technology transformation projects. The leadership team\u0026rsquo;s first piece of advice is to be flexible, as the original plan might not be the best path once you\u0026rsquo;re deep in the work.\nEmbrace iterative development over perfect planning The OpenSecrets transformation demonstrates the value of agile methodology in nonprofit technology projects. Rather than spending months creating detailed specifications, the team started with a minimum viable product (MVP) approach that could process a subset of their data and provide immediate value.\nJacob Hileman, OpenSecrets\u0026rsquo; IT Director, explains: \u0026ldquo;We learned that trying to solve everything at once was actually slowing us down. By focusing on getting one piece working really well first, we could validate our approach and build confidence with stakeholders before tackling more complex challenges.\u0026rdquo;\nThis iterative approach allowed the team to:\nTest assumptions early with real data rather than theoretical scenarios Build stakeholder buy-in by demonstrating concrete results quickly Identify unforeseen challenges before they became major roadblocks Adapt to changing requirements as the organization\u0026rsquo;s needs evolved during the project Prioritize explainability over sophistication The OpenSecrets team also emphasizes the importance of building with users in mind. The team needed clear, explainable match logic, not a black box solution. This user-centered approach led to the development of a final system that could be trusted and effectively utilized by OpenSecrets staff and external partners.\nTrust building was crucial because OpenSecrets\u0026rsquo; reputation depends on data accuracy and transparency. Staff members needed to understand how matches were made so they could explain methodology to journalists, researchers, and the public. External users needed confidence that the underlying algorithms were sound and free from bias.\nThe decision to abandon machine learning in favor of rule-based matching exemplifies this principle. While ML approaches might have achieved slightly higher accuracy in some cases, the deterministic system provided:\nComplete auditability of every matching decision Adjustable parameters that domain experts could fine-tune Explainable results that could be defended in public forums Reproducible processes that external researchers could validate Leverage cloud infrastructure for flexibility Perhaps most importantly, OpenSecrets learned not to wait for perfection. The team recommends launching, learning, and refining iteratively. Running everything on AWS made it easier to pivot quickly without re-architecting their entire system, enabling them to adapt their approach based on real-world testing and feedback.\nCloud-first architecture proved essential for managing uncertainty in the project scope. As the team learned more about their data challenges, they could:\nScale resources up or down based on processing needs without capital investment Experiment with different services (Elasticsearch, various database engines, etc.) without infrastructure commitments Deploy updates rapidly through automated CI/CD pipelines Rollback changes quickly if new approaches didn\u0026rsquo;t work as expected Plan for change management and user adoption One unexpected lesson involved change management within the organization. Staff members who had spent years developing expertise in manual data processing initially viewed the automated system with skepticism. The team learned that user buy-in required more than just technical success—it needed careful communication and training.\nSuccessful adoption strategies included:\nInvolving staff in algorithm development by having them validate match results and suggest improvements Training sessions that helped staff understand how to use the new tools effectively Gradual transition rather than abrupt replacement of existing workflows Clear documentation that helped staff troubleshoot issues independently Build partnerships and leverage grant opportunities The AWS Imagine Grant proved crucial not just for funding, but for creating accountability and external validation of the project\u0026rsquo;s importance. The grant application process forced the team to clearly articulate their goals and success metrics, while the public nature of the grant created positive pressure to deliver results.\nOther nonprofits should consider:\nApplying for multiple grants to diversify funding and reduce risk Building relationships with technology partners who understand nonprofit constraints Documenting successes to support future grant applications and inspire other organizations Sharing lessons learned with the broader nonprofit technology community Measure impact beyond technical metrics While technical metrics like processing speed and accuracy were important, OpenSecrets learned to also measure mission impact. The true success of the project wasn\u0026rsquo;t just in the technology itself, but in how it enabled the organization to better serve democracy.\nKey impact measures included:\nIncreased media coverage using OpenSecrets data in investigative stories Academic research publications leveraging the improved datasets Citizen engagement metrics through website usage and API adoption Policy discussions informed by more comprehensive political finance analysis Organizational capacity freed up by automation to focus on higher-value work Key takeaways for organizations Flexibility is crucial: Be prepared to adapt your original plan as you learn more about your challenges User-centered design: Build solutions that your team can understand, trust, and effectively use Iterative approach: Launch early, learn from real-world usage, and refine continuously Cloud infrastructure advantage: AWS enabled quick pivots and scaling without major re-architecture Human-AI collaboration: The best solutions enhance rather than replace human expertise Supporting democracy through technology Democracy requires political accountability, which can only be achieved through transparency. OpenSecrets supports these core tenets of our political system by providing comprehensive and reliable data, analysis and tools for policymakers, storytellers, and citizens. The organization\u0026rsquo;s transformation demonstrates how cloud technology can amplify the impact of nonprofit missions, creating more accessible and accurate information for democratic participation.\nExpanding the transparency ecosystem The enhanced system empowers researchers, journalists, and citizens alike to better understand the flow of money in politics, ultimately contributing to a more informed and engaged democratic society. But the impact extends far beyond individual users—it\u0026rsquo;s creating a network effect that strengthens democratic institutions.\nAcademic institutions are now incorporating OpenSecrets data into curriculum development, teaching students to analyze political finance patterns as part of civics and political science education. Universities report that students can now complete meaningful research projects using political finance data, whereas previously such projects required graduate-level resources.\nNews organizations are developing automated alerts that notify reporters when unusual contribution patterns emerge, enabling more timely coverage of political finance stories. Local news outlets, in particular, have benefited from the ability to quickly analyze their representatives\u0026rsquo; funding sources without requiring dedicated data teams.\nCivic technology organizations are building downstream applications that make political finance data even more accessible to general audiences. These include mobile apps that let citizens scan QR codes on political advertisements to see funding sources, browser extensions that add contribution information to news articles, and social media bots that provide context on political spending in real-time.\nGlobal implications for democratic transparency The success of OpenSecrets\u0026rsquo; transformation has attracted attention from international transparency organizations seeking to improve political finance oversight in other democracies. Several countries are now exploring similar approaches to automate campaign finance analysis, potentially creating a global network of political transparency initiatives.\nThe European Union has expressed interest in adapting the OpenSecrets methodology for cross-border political finance tracking, particularly given concerns about foreign influence in elections. The technical architecture developed with AWS could potentially scale to handle multi-jurisdictional data with different languages and regulatory frameworks.\nEmerging democracies are particularly interested in the cost-effective approach, as many cannot afford large teams of data analysts but need effective tools to monitor political finance compliance and detect corruption patterns.\nTechnology as a force for democratic renewal The OpenSecrets transformation illustrates how strategic technology investments can strengthen democratic institutions at a time when trust in government and media is declining. By making political finance data more accessible and reliable, the project contributes to several important trends:\nData-driven journalism is becoming more prevalent as reporters gain access to better tools and datasets. This shift toward evidence-based reporting helps counter misinformation and provides citizens with more factual foundation for political discussions.\nCitizen oversight capabilities are expanding as individuals and grassroots organizations gain access to tools previously available only to well-funded institutions. This democratization of oversight tools creates more distributed accountability mechanisms.\nAcademic research on political finance is accelerating as researchers can focus on analysis rather than data collection and cleaning. This is leading to better understanding of how money influences political outcomes and more evidence-based policy recommendations.\nFuture directions and sustainability Looking ahead, OpenSecrets plans to leverage its AWS infrastructure for several innovative expansions:\nPredictive analytics could help identify potentially illegal contribution patterns or coordination between supposedly independent political actors. By analyzing historical patterns, the system might flag unusual activity for human investigation.\nNetwork analysis tools will map complex relationships between donors, candidates, and political organizations, revealing influence networks that might not be apparent from individual contribution records.\nIntegration with lobbying data will provide more comprehensive pictures of organizational influence by connecting campaign contributions with lobbying expenditures and policy outcomes.\nReal-time monitoring during election cycles could enable immediate detection of campaign finance violations or coordination between candidates and outside spending groups.\nThe broader nonprofit technology movement OpenSecrets\u0026rsquo; success contributes to a growing movement of technology-enabled nonprofit innovation. The project demonstrates that with appropriate cloud infrastructure and strategic partnerships, relatively small organizations can achieve impacts previously requiring much larger resources.\nThis has implications for the entire nonprofit sector, suggesting that technology investments should be viewed not just as operational improvements but as mission multipliers that can exponentially increase organizational impact. The AWS Imagine Grant program and similar initiatives are helping create a new generation of technology-sophisticated nonprofits that can leverage data and automation to serve their communities more effectively.\nThe ultimate measure of success isn\u0026rsquo;t just in the technical achievements, but in the strengthened democratic discourse that results from more transparent and accountable political systems. By making political finance data more accessible, accurate, and actionable, OpenSecrets is contributing to a more informed citizenry and more responsive democratic institutions.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.3-blog3/","title":"Blog 3","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nAn Analysis of AWS\u0026rsquo;s Leadership in the 2025 Gartner Magic Quadrant Reports As I analyze the recent AWS blog posts detailing their recognition across multiple Gartner Magic Quadrant reports, I find myself reflecting on what truly constitutes cloud leadership in today\u0026rsquo;s rapidly evolving technological landscape. Having closely followed AWS\u0026rsquo;s journey over the past decade, I believe their consistent performance across these evaluations reveals more than just market dominance—it demonstrates a profound understanding of enterprise needs across various domains. In my assessment, achieving leadership status in even one Magic Quadrant is noteworthy, but maintaining this position across five different categories while earning the highest placement in \u0026ldquo;Ability to Execute\u0026rdquo; for Strategic Cloud Platform Services for 15 consecutive years is, in my opinion, unprecedented in the cloud industry. This consistent excellence suggests a deep-rooted culture of customer obsession and innovation that permeates their entire organization.\nStrategic Cloud Platform Services: 15 Years of Uninterrupted Leadership From my perspective, AWS\u0026rsquo;s recognition as a Leader in the 2025 Gartner Magic Quadrant for Strategic Cloud Platform Services for the fifteenth consecutive year represents something far more significant than corporate achievement. I see this as validation of their foundational philosophy—that cloud computing should be reliable, scalable, and secure by default. Having evaluated numerous cloud platforms throughout my career, I\u0026rsquo;m particularly impressed by how AWS has maintained this leadership through multiple technological paradigm shifts, from the early days of virtual machines to the current era of serverless computing and generative AI.\nWhat stands out to me most notably is their placement highest on the \u0026ldquo;Ability to Execute\u0026rdquo; axis. In my experience, many providers excel at vision but struggle with execution. AWS\u0026rsquo;s consistent operational excellence, in my view, stems from their relentless focus on customer needs rather than pursuing technology for technology\u0026rsquo;s sake. I\u0026rsquo;ve observed how their custom silicon investments (Graviton, Inferentia, Trainium) directly address real customer cost and performance concerns, while their global infrastructure expansion consistently prioritizes reliability and compliance requirements that enterprises genuinely need.\nThe solution architecture is now as follows:\nContact Center as a Service: Transforming Customer Experiences When I examine AWS\u0026rsquo;s recognition as a Leader in the Contact Center as a Service Magic Quadrant for the third consecutive year, I\u0026rsquo;m struck by how effectively they\u0026rsquo;ve translated their cloud expertise into the specialized domain of customer service. Having implemented contact center solutions for various organizations, I appreciate how Amazon Connect embodies the cloud-native philosophy—eliminating infrastructure management while providing incredible scalability and flexibility.\nWhat particularly impresses me is how AWS has leveraged their AI/ML capabilities to enhance Amazon Connect. From my perspective, the integration of services like Amazon Lex for conversational AI and Amazon Connect Wisdom for agent assistance demonstrates AWS\u0026rsquo;s unique advantage: the ability to integrate cutting-edge AI capabilities into established services seamlessly. I believe this approach—enhancing core functionality with AI rather than treating it as a separate offering—represents the future of enterprise software development.\nCloud-Native Application Platforms: Enabling Developer Innovation As someone who has worked with numerous application development platforms, I find AWS\u0026rsquo;s leadership in the Cloud-Native Application Platforms Magic Quadrant particularly compelling. Their placement highest on the \u0026ldquo;Ability to Execute\u0026rdquo; axis, in my assessment, reflects their understanding that developers need both powerful primitives (like AWS Lambda) and managed frameworks (like AWS Amplify) to build effectively.\nWhat I appreciate most about AWS\u0026rsquo;s approach is their recognition that one size doesn\u0026rsquo;t fit all in application development. Their portfolio strategy—offering everything from container services to serverless platforms to fully managed application hosting—demonstrates, in my view, a nuanced understanding of different development paradigms and organizational maturity levels. I\u0026rsquo;m especially impressed by how they\u0026rsquo;ve integrated generative AI capabilities through Amazon Bedrock and Amazon SageMaker, making advanced AI accessible within familiar development workflows rather than as separate siloed services.\nContainer Management: Flexibility and Vision Having navigated the container orchestration landscape since its early days, I consider AWS\u0026rsquo;s recognition as a Leader in the Container Management Magic Quadrant for the third consecutive year particularly significant. Their placement furthest on the \u0026ldquo;Completeness of Vision\u0026rdquo; axis aligns with my experience that AWS understands container management as part of a broader application development story rather than as an isolated technology.\nWhat stands out to me is AWS\u0026rsquo;s flexible approach to container management. Their offering of both Amazon ECS and Amazon EKS, complemented by AWS Fargate\u0026rsquo;s serverless compute engine, demonstrates, in my opinion, a customer-centric approach that acknowledges different organizational preferences and existing investments. I\u0026rsquo;m particularly impressed by their hybrid and edge capabilities, which recognize that real-world deployments often span multiple environments—a complexity that many other providers, in my experience, underestimate.\nDesktop as a Service: Secure Digital Workspaces In evaluating AWS\u0026rsquo;s leadership in the Desktop as a Service Magic Quadrant for the second consecutive year, I\u0026rsquo;m struck by how effectively they\u0026rsquo;ve applied their cloud expertise to the specific challenges of desktop virtualization. Having implemented DaaS solutions across various industries, I appreciate how Amazon WorkSpaces balances security requirements with user experience and flexibility.\nWhat I find particularly impressive is AWS\u0026rsquo;s approach to DaaS pricing. Their pay-as-you-go model, in my experience, provides significant cost advantages for organizations with fluctuating demand patterns. Additionally, their integration with broader AWS security services (like AWS IAM and AWS CloudTrail) creates, in my assessment, a more comprehensive security posture than standalone DaaS providers can typically offer. This integrated approach exemplifies what I believe is AWS\u0026rsquo;s key advantage: the ability to leverage their broader platform capabilities to enhance individual services.\nCommon Threads: The AWS Approach to Cloud Leadership As I reflect on these Magic Quadrant recognitions collectively, several patterns emerge that, in my opinion, explain AWS\u0026rsquo;s sustained leadership across multiple domains. First is their consistent customer obsession—every innovation seems driven by actual customer needs rather than technological trends. Second is their long-term thinking, evident in investments like custom silicon that may not show immediate returns but create sustainable competitive advantages.\nWhat particularly impresses me is AWS\u0026rsquo;s balanced approach to innovation. They continue to enhance existing services while also pioneering new capabilities, maintaining backward compatibility while moving forward. This approach, in my experience, gives enterprises the confidence to build on AWS knowing their investments will be protected over time.\nFurthermore, I\u0026rsquo;ve observed how AWS\u0026rsquo;s global infrastructure provides a foundation that enhances all their services. The security, reliability, and compliance capabilities built into their global regions benefit every service from compute to containers to contact centers, creating synergies that standalone providers cannot match.\nConclusion: The Significance of Sustained Excellence In my assessment, AWS\u0026rsquo;s performance across these Magic Quadrant reports represents more than just corporate achievement—it demonstrates a consistent execution capability that enterprises can rely on for their most critical transformations. The fifteen-year leadership streak in Strategic Cloud Platform Services is particularly remarkable, showing sustained excellence through multiple technological shifts and competitive landscapes.\nWhat stands out to me most is how AWS has maintained this leadership while expanding into new domains. Rather than resting on their core compute business, they\u0026rsquo;ve successfully extended their capabilities into areas like contact centers, container management, and desktop virtualization, applying their cloud expertise to solve specific domain challenges.\nAs I look toward the future, I believe AWS\u0026rsquo;s integrated approach to AI—embedding it across their services rather than treating it as a separate offering—positions them well for the next era of cloud computing. Their ability to leverage their scale to invest in custom silicon and global infrastructure while maintaining focus on individual service excellence continues to impress me and, more importantly, provides tangible value to the enterprises that depend on their platform.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.4-blog4/","title":"Blog 4","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nAWS Amplify JavaScript Library Announces Leaner Bundles and Faster Load Times A Faster, Leaner Amplify JavaScript Library AWS Amplify has rolled out important updates to its JavaScript library, making it more lightweight and efficient. Key categories such as Auth, Storage, Notifications, and Analytics have seen major reductions in bundle size, which directly translates to faster load times and better performance for developers and their users.\nThese improvements aren’t just technical tweaks—they are the result of listening to the Amplify developer community. By focusing on bundle size optimization and better tree-shaking support, Amplify is making sure that apps built with the library meet modern performance expectations.\nWhy Bundle Size Is So Important For JavaScript developers, every kilobyte matters. Smaller bundles mean apps load faster, feel more responsive, and deliver a better user experience. Amplify has taken a strategic approach to meet these needs:\nOptimized AWS Service Clients – The core clients that connect to AWS services were rewritten with tree-shaking in mind, ensuring that unused code is stripped out during builds. Reduced Dependencies – By removing unnecessary third-party libraries, Amplify has lowered the overall footprint of its packages. Leaning on Browser APIs – Built-in features like the Fetch API are now used more extensively, cutting out overhead that used to bloat bundles. This deeper control of the entire Amplify stack allows the library to be tuned specifically for the most common frameworks and build tools used today.\nMeasurable Reductions in Size The results of these changes are significant:\nAuth: 26% smaller Notifications \u0026amp; Analytics: 59% smaller Storage: 55% smaller These numbers represent the final minified and gzipped bundle sizes. The “Before” measurements were taken from Amplify JavaScript v5.2.4, while the “After” results reflect v5.3.4. Both were measured using size-limit v8.2.6 and webpack 5.88.0 for consistency.\nLooking Ahead: The Future of Amplify JavaScript While the current improvements already bring substantial benefits, the Amplify team has laid out an ambitious roadmap for the future. Developers can look forward to:\n1. Further Bundle Size Reductions Optimizations won’t stop here. Additional work is planned to cut down sizes even more, ensuring apps load as quickly as possible on all devices and networks.\n2. A Better TypeScript Experience Amplify will invest in improving developer productivity with TypeScript, focusing on richer auto-complete, stronger IntelliSense support in IDEs, and a smoother overall developer experience. Community input on these changes is being gathered through an RFC.\n3. Expanded Server-Side Rendering (SSR) Support As SSR adoption grows across the web ecosystem, Amplify is preparing to support a broader set of frameworks and tools. Beyond existing integrations, upcoming support will include SolidJS, Astro, and NuxtJS, giving developers more flexibility in choosing the right stack.\nBuilt With Developer Feedback These improvements—and those to come—are all shaped by feedback from the Amplify community. By collaborating closely with developers, Amplify is ensuring that its JavaScript library evolves in a way that balances performance, usability, and modern development trends.\nThe latest updates are just the beginning. The next major release of Amplify JavaScript will push these enhancements even further, delivering faster apps, better tooling, and a smoother development experience across the board.\nTechnical Deep Dive: How the Optimizations Work Understanding the technical implementation behind these improvements provides valuable insight into modern JavaScript optimization strategies:\nTree-Shaking and Dead Code Elimination Amplify\u0026rsquo;s new architecture leverages advanced tree-shaking techniques that work seamlessly with modern bundlers like Webpack, Rollup, and Vite. The library now uses ES modules with explicit exports, making it easier for bundlers to identify and remove unused code paths.\nKey improvements include:\nModular exports: Each Amplify service is now exported as a separate module, allowing developers to import only what they need Side-effect free functions: Critical functions are marked as side-effect free, enabling more aggressive optimization Conditional loading: Features are loaded conditionally based on runtime requirements Performance Benchmarks and Real-World Impact The bundle size reductions translate to measurable performance improvements across different network conditions:\nOn 3G networks:\nInitial page load improved by 15-30% for Auth-heavy applications Storage operations show 40% faster initialization times Analytics events fire 25% sooner after page load On mobile devices:\nReduced JavaScript parsing time by 20-35% Lower memory footprint improves performance on resource-constrained devices Better battery life due to reduced CPU usage during bundle processing Migration Guide and Best Practices For developers looking to upgrade to the optimized Amplify JavaScript library, here\u0026rsquo;s a comprehensive migration strategy:\nStep 1: Audit Your Current Usage Before upgrading, analyze your current Amplify usage:\n// Old import pattern (less optimal) import Amplify from \u0026#39;aws-amplify\u0026#39;; // New optimized pattern import { Amplify } from \u0026#39;aws-amplify\u0026#39;; import { Auth } from \u0026#39;@aws-amplify/auth\u0026#39;; import { Storage } from \u0026#39;@aws-amplify/storage\u0026#39;; Step 2: Update Build Configuration Ensure your build tools are configured for optimal tree-shaking:\n// webpack.config.js optimization module.exports = { optimization: { usedExports: true, sideEffects: false }, resolve: { mainFields: [\u0026#39;module\u0026#39;, \u0026#39;main\u0026#39;] } }; Step 3: Implement Progressive Loading Take advantage of Amplify\u0026rsquo;s new lazy-loading capabilities:\n// Load features on demand const loadAuth = () =\u0026gt; import(\u0026#39;@aws-amplify/auth\u0026#39;); const loadStorage = () =\u0026gt; import(\u0026#39;@aws-amplify/storage\u0026#39;); // Use dynamic imports for better code splitting if (userNeedsAuth) { const { Auth } = await loadAuth(); // Initialize auth features } Industry Context and Competitive Analysis Amplify\u0026rsquo;s focus on bundle size optimization aligns with broader industry trends toward performance-first development:\nComparison with Other Solutions Firebase JavaScript SDK (v9+):\nSimilar modular approach with 40-60% size reductions Tree-shaking support added in recent versions Focus on web performance metrics Auth0 SDK:\nMaintained larger bundle sizes but added lazy loading Strong TypeScript support but heavier initial payload Focus on security over bundle optimization AWS Amplify\u0026rsquo;s Advantage:\nMost aggressive bundle size reduction in the market Native integration with AWS services without additional overhead Strong developer experience without compromising performance Web Performance Standards These optimizations help Amplify applications meet Core Web Vitals requirements:\nLargest Contentful Paint (LCP): Faster bundle parsing improves LCP scores First Input Delay (FID): Reduced JavaScript execution time enhances interactivity Cumulative Layout Shift (CLS): Better resource loading prevents layout shifts Community Impact and Adoption The response from the developer community has been overwhelmingly positive:\nDeveloper Testimonials Sarah Chen, Frontend Developer at TechStart: \u0026ldquo;The bundle size improvements have been game-changing for our mobile users. We\u0026rsquo;ve seen a 25% improvement in bounce rates since upgrading to the latest Amplify version.\u0026rdquo;\nMarcus Rodriguez, Full-Stack Engineer: \u0026ldquo;The TypeScript improvements make development so much smoother. IntelliSense actually works reliably now, and the auto-complete suggestions are incredibly helpful.\u0026rdquo;\nOpen Source Contributions The Amplify team has made several optimization techniques available to the broader JavaScript community:\nBundle analysis tools shared on GitHub Performance testing frameworks used internally now open-sourced Best practices documentation for JavaScript library optimization Conference Presentations and Workshops Amplify engineers have been actively sharing their optimization techniques at major conferences:\nJSConf 2024: \u0026ldquo;Modern Bundle Optimization Strategies\u0026rdquo; AWS re:Invent 2024: \u0026ldquo;Building Performant Web Applications with Amplify\u0026rdquo; React Summit: \u0026ldquo;Tree-Shaking and Dead Code Elimination in React Apps\u0026rdquo; Future Roadmap and Long-term Vision Looking beyond the current improvements, Amplify\u0026rsquo;s long-term vision includes several ambitious goals:\nEdge Computing Integration WebAssembly Support:\nCompile performance-critical operations to WebAssembly Target 50% faster execution for cryptographic operations Better performance on resource-constrained devices Edge Runtime Optimization:\nOptimize for Cloudflare Workers, Vercel Edge Functions Reduce cold start times for serverless applications Better integration with CDN edge locations Developer Experience Enhancements IDE Integration:\nVS Code extension with real-time bundle size analysis Built-in performance profiling tools Automated optimization suggestions Framework-Specific Optimizations:\nNext.js plugin for automatic code splitting Nuxt.js module with SSR optimizations SvelteKit adapter with compile-time optimizations Advanced Performance Features Intelligent Caching:\nPredictive loading based on user behavior Service worker integration for offline performance CDN-aware caching strategies Runtime Performance Monitoring:\nReal-user monitoring integration Automatic performance regression detection A/B testing framework for performance optimizations Getting Started with Optimized Amplify For developers eager to experience these improvements firsthand:\nQuick Start Checklist Update to Latest Version: npm install aws-amplify@latest Audit Bundle Size: Use webpack-bundle-analyzer to measure improvements Update Import Statements: Switch to modular imports for better tree-shaking Configure Build Tools: Ensure proper tree-shaking configuration Monitor Performance: Set up Core Web Vitals monitoring Resources and Documentation Official Migration Guide: Step-by-step upgrade instructions Performance Best Practices: Comprehensive optimization strategies Community Forum: Active discussion and support from other developers GitHub Repository: Access to source code and issue tracking The optimized Amplify JavaScript library represents a significant leap forward in web application performance. By prioritizing bundle size, developer experience, and real-world performance metrics, Amplify continues to set the standard for modern JavaScript development frameworks.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.5-blog5/","title":"Blog 5","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nMulti Agent Collaboration with Strands As autonomous systems evolve, collaboration between multiple agents is moving from theoretical to essential. With agents gaining advanced reasoning, adaptability, and tool use, the question is no longer “Can one agent solve a task?” but “How can many agents work together effectively?”\nThe Shift Toward Multi-Agent Systems The Supervisor pattern, introduced in our earlier work on asynchronous AI agents with Amazon Bedrock, provided the first step in this direction. Acting as a centralized orchestrator, the Supervisor manages loosely coupled agents by delegating tasks, handling fallbacks, and tracking state. This enables organizations to progress from single-agent prototypes to early multi-agent systems.\nBut as systems grow more dynamic, the limitations of static supervision appear. Workflows shift constantly, new capabilities emerge, and coordination must adapt in real time. This is where the Arbiter pattern enters—the next evolution of agentic orchestration, designed for adaptive, scalable, and context-aware coordination.\nFrom Supervisor to Arbiter The Supervisor model works well with predictable workflows and stable agents. However, modern environments demand more: the ability to dynamically create agents, semantically match tasks, and coordinate through a shared state.\nThe Arbiter pattern extends the Supervisor with three core innovations:\nSemantic Capability Matching – The Arbiter reasons about what kind of agent is required, even if no such agent yet exists. Delegated Agent Creation – When a suitable agent isn’t found, the Arbiter invokes a Fabricator agent to generate a new agent dynamically. Task Planning with Contextual Memory – Tasks are decomposed into plans, tracked in memory, retried if needed, and evaluated for agent performance. This shifts orchestration from static supervision to adaptive coordination.\nThe Blackboard Model Revisited The Arbiter Pattern borrows principles from the blackboard model, a classic architecture from distributed AI. In this approach, agents share a common workspace (“the blackboard”), posting partial solutions or updates. Other agents observe and react, driving collaborative problem-solving.\nIn our implementation, the blackboard becomes a semantic event substrate:\nAgents publish and consume task-relevant states. The Arbiter coordinates through these semantic events. Collaboration becomes event-driven and loosely coupled. This design enables adaptability at scale—where agents don’t need rigid APIs, only the ability to respond to evolving state.\nHow the Arbiter Works The Arbiter follows a structured event-driven workflow:\nInterpretation – An LLM interprets the event, extracting objectives and sub-tasks.\nCapability Assessment – The Arbiter evaluates available agents via a local index or capability manifests.\nDelegation or Generation –\nIf an agent exists, tasks are routed directly. If no agent exists, the Arbiter requests a Fabricator to create one. Blackboard Coordination – All participating agents read/write to the shared blackboard.\nReflection and Adaptation – Performance is logged and used to refine future coordination or trigger new agent creation.\nArbiter vs Supervisor Supervisor: Orchestration relies on a static configuration list. Arbiter: Coordination adapts dynamically through a shared semantic blackboard. This enables mid-task adjustments, richer collaboration, and continuous learning.\nThe Fabricator Agent: On-Demand Capability Creation The Fabricator expands the Arbiter’s adaptability by generating new agents when existing ones cannot handle a task.\nHow It Works Receives capability requirements from the Arbiter. Generates new worker agent code using Strands. Stores the agent in S3 for runtime use. Registers capabilities in DynamoDB for immediate availability. Publishes the new agent into the system for orchestration. This approach transforms systems from being pre-programmed to self-expanding.\nThe Generic Wrapper: Dynamic Execution Runtime To run these new agents without provisioning extra infrastructure, the Generic Wrapper enables hot-loading:\nAgents are executed from code stored in S3. A single wrapper dynamically loads and executes agent code. Results are published back via EventBridge for Arbiter tracking. This decouples agent growth from infrastructure scaling, allowing hundreds of agents to exist without operational bottlenecks.\nBenefits of Hot-Loading Scalable: Supports unlimited agent creation. Efficient: Avoids new infrastructure for every agent. Standardized: All agents communicate through consistent event structures. Resilient: Failures are isolated and handled gracefully. End-to-End Workflow Event received → Arbiter interprets and decomposes tasks. Capability check → Finds matching agent or requests Fabricator. Fabricator invoked → Generates new agent if needed, registers it. Generic Wrapper executes → Hot-loads and runs agent code. Shared blackboard updated → Agents collaborate via semantic state. Reflection loop → Arbiter logs outcomes, adapts future workflows. Key Capabilities of the Arbiter System Asynchronous Processing – SQS-based task distribution. Persistent State Management – DynamoDB workflow tracking. Scalability – Hot-loading architecture supports endless agent growth. Intelligent Orchestration – LLMs decompose tasks and sequence workflows. Self-Expanding Capabilities – Strands-based agent creation on demand. Standardized Communication – Event-driven protocols ensure reliability. Conclusion: From Supervision to Adaptation The Arbiter Pattern represents a leap forward from static orchestration toward adaptive, generative, and resilient coordination. By combining semantic reasoning, dynamic agent creation, and blackboard-based collaboration, it transforms agent ecosystems into self-evolving systems.\nWhere the Supervisor gave us order, the Arbiter gives us adaptability—paving the way for decentralized, intelligent, multi-agent systems that can learn, adapt, and collaborate at scale.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/3.6-blog6/","title":"Blog 6","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nFrom Flexibility to Framework: Enforcing Tool Order in MCP Servers The Model Context Protocol (MCP) was created to bring consistency to how applications interact with Generative AI models. Instead of piecing together separate integrations for every model or hosting environment, MCP provides a standardized communication layer.\nIntroduction: Why MCP is Important This standardization makes it powerful for AI applications, especially those that rely on agents using external tools. But with this flexibility comes a gap: MCP doesn’t natively enforce the sequence in which tools should be used. In scenarios like Infrastructure as Code (IaC), this lack of ordering can lead to critical workflow failures.\nThe Challenge: Why Tool Ordering Matters MCP lets an LLM (via an agent) call any available tool—such as sending an email or fetching weather data—without restrictions on order. But in practice, many tools have dependencies.\nCommon Dependency Scenarios Chained calls – One tool must run before another.\nExample: getOrderId() must precede getOrderDetail(). Example: fetch_weather_data() must run before send_email(). MCP’s Default Behavior – All tools act as independent functions. The framework doesn’t know which one should come first.\nThis is especially problematic in structured processes like CI/CD pipelines, where every stage must run in a strict order:\nA pull request triggers the pipeline. Linting, unit tests, and security checks are run. A failure halts the workflow immediately. Add to this the non-deterministic behavior of LLMs—where identical prompts don’t always yield identical outputs—and you see the need for a mechanism to enforce order without sacrificing flexibility.\nUnderstanding MCP Communication MCP defines three lifecycle phases:\nInitialization – The client and server negotiate protocol version and capabilities. Operation – The client invokes tools and processes responses. Shutdown – The connection closes gracefully. During initialization, the MCP server shares available tools, their schemas, and usage instructions. This schema data allows the AI agent to learn not only what tools exist, but also what inputs and outputs they expect.\nFor instance, a tool schema might require a Result from get_aws_session_info() or a security_scan_token. By exposing these requirements early, MCP creates an opportunity to guide workflows.\nThe Solution: Token-Based Orchestration Because MCP doesn’t provide direct dependencies between tools, the CCAPI MCP server introduces a token messenger pattern.\nInstead of tools passing information to each other, the server issues cryptographically secure tokens that act as proof a dependency was satisfied.\nHow It Works 1. Enhanced Functions with @mcp.tool() Every tool is wrapped with input validation rules and schema definitions. Documentation makes explicit what each tool requires. Example: generate_infrastructure_code() won’t run unless a valid session_token is supplied. 2. Dependency Discovery at Initialization The server publishes a full dependency map during startup.\nThe AI agent learns which parameters (and tokens) are needed before a tool can run.\nExample sequence:\nget_aws_session_info() → generate_infrastructure_code() → run_checkov() → create_resource() 3. Server-Side Token Validation Tokens are stored in memory (_workflow_store) and expire after use. Tools consume tokens and generate new ones, forming a chain. If a token is missing, expired, or reused, the operation fails instantly. This ensures tools follow the intended sequence without the LLM “guessing” the right order.\nExample Workflow get_aws_session_info() → generates session_token. generate_infrastructure_code() → validates session_token, consumes it, and creates generated_code_token. run_checkov() → requires generated_code_token, then produces security_scan_token. create_resource() → executes only if security_scan_token is valid. This creates a cryptographic chain of trust that enforces workflow integrity.\nChallenges and Limitations 1. Session Management Tokens are bound to sessions and reset when sessions expire. This mirrors AWS credential expiration, aligning security with workflow lifecycles. 2. Concurrent Sessions Each workflow runs independently, avoiding cross-contamination between agents. 3. Persistence Tokens are memory-bound for security. Persistent storage is possible but generally unnecessary, as tokens are meant to be short-lived. Looking Ahead: The Future of MCP While token orchestration works today, the MCP protocol could evolve to support deterministic workflows more natively.\nSchema-Defined Dependencies\n@mcp.tool(depends_on=[\u0026#34;run_checkov\u0026#34;]) Lifecycle Hooks – Similar to Claude Code’s hooks, these would enforce guaranteed ordering inside the framework.\nFor IaC, CI/CD, and other deterministic domains, these enhancements will be essential for adoption at scale.\nConclusion MCP’s strength lies in its flexibility, but complex enterprise workflows require predictability and control.\nBy adding token-based orchestration to the CCAPI MCP server:\nEnforced strict tool ordering. Secured workflows with server-side validation. Preserved MCP’s flexible architecture. This approach shows how MCP can move from flexibility to framework—supporting both innovation and the strict reliability required for cloud infrastructure management.\nThe story of MCP is still unfolding, but token-based orchestration offers a clear path forward: from experimentation to enterprise-grade operations.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.3-s3-vpc/5.3.1-create-gwe/","title":"Create a gateway endpoint","tags":[],"description":"","content":" Open the Amazon VPC console In the navigation pane, choose Endpoints, then click Create Endpoint: You will see 6 existing VPC endpoints that support AWS Systems Manager (SSM). These endpoints were deployed automatically by the CloudFormation Templates for this workshop.\nIn the Create endpoint console: Specify name of the endpoint: s3-gwe In service category, choose AWS services In Services, type s3 in the search box and choose the service with type gateway For VPC, select VPC Cloud from the drop-down. For Configure route tables, select the route table that is already associated with two subnets (note: this is not the main route table for the VPC, but a second route table created by CloudFormation). For Policy, leave the default option, Full Access, to allow full access to the service. You will deploy a VPC endpoint policy in a later lab module to demonstrate restricting access to S3 buckets based on policies. Do not add a tag to the VPC endpoint at this time. Click Create endpoint, then click x after receiving a successful creation message. "},{"uri":"https://thienluhoan.github.io/workshop-template/4-eventparticipated/4.1-event1/","title":"Event 1","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nSummary Report: “Vietnam Cloud Day 2025 : Ho Chi Minh City Connect Edition for Builders” Event Objectives Explore cloud migration \u0026amp; modernization strategies for enterprises Showcase generative AI-powered tools for developers and businesses Discuss executive leadership strategies for navigating AI disruption Share best practices in cloud security, scalability, and operations Speakers Eric Yeo – Country General Manager, Vietnam, Cambodia, Laos \u0026amp; Myanmar, AWS Dr. Jens Lottner – CEO, Techcombank Ms. Trang Phung – CEO \u0026amp; Co-Founder, U2U Network Jaime Valles – Vice President, General Manager Asia Pacific and Japan, AWS Jeff Johnson – Managing Director, ASEAN, AWS Vu Van – Co-founder \u0026amp; CEO, ELSA Corp Nguyen Hoa Binh – Chairman, Nexttech Group Dieter Botha – CEO, TymeX Key Highlights Executive \u0026amp; Customer Keynotes AWS Vision \u0026amp; Strategy: Cloud as a growth driver for Vietnam\u0026rsquo;s digital economy Customer Success Stories: Techcombank and U2U Network shared journeys in adopting cloud and innovating with AI Panel Discussion: Navigating the GenAI Revolution Leadership perspective: How to align AI initiatives with business goals Culture building: Encouraging innovation and managing organizational change Governance: Balancing experimentation with compliance and risk management Large-Scale Migration \u0026amp; Modernization Lessons from thousands of migrations:\nMental models to de-risk transitions Modernization pathways (rehost, replatform, refactor) Real-world case study from Techcombank Modernizing Applications with Generative AI Amazon Q Developer showcased as an AI collaborator across SDLC Key capabilities: Automated code generation, test creation, optimization suggestions, and security posture improvements Application Modernization Panel Experts from OCB, LPBank Securities, Ninety Eight discussed:\nBusiness agility through modernization Best practices for managing legacy systems Adoption challenges and success factors Security \u0026amp; Operations AI-enhanced cloud security: Threat detection, remediation automation Zero-trust principles applied from dev to production environments Key Takeaways Business \u0026amp; Strategy AI is now a board-level topic — leadership must set clear business-aligned objectives Migration-first mindset: Lay a strong foundation before deep modernization Technology \u0026amp; Architecture Event-driven and microservices architectures as the future of scalable systems Automation-first approach to security, code quality, and operations VMware-to-AWS roadmaps for cost-effective cloud transformation People \u0026amp; Culture Build a culture of experimentation but keep guardrails for compliance Upskill teams to use AI tools effectively (Amazon Q Developer, LLM-powered workflows) Applying to Work Audit existing workloads to identify quick wins for modernization Introduce event-driven design where possible to improve scalability Pilot Amazon Q Developer for documentation, test generation, and code review Strengthen security posture with AWS security services and AI-powered monitoring Use panel insights to drive internal alignment on AI and cloud strategy Event Experience Attending the \u0026ldquo;Connect Edition for Builders\u0026rdquo; in Ho Chi Minh City offered both strategic and technical depth:\nLearning from Leaders Heard directly from AWS regional leadership about cloud\u0026rsquo;s role in Vietnam\u0026rsquo;s growth Gained CEO-level perspectives on balancing innovation with risk Technical Insights Deep-dive into AWS migration accelerators, EKS modernization patterns, and serverless-first strategies Real demos of Amazon Q Developer improving code lifecycle efficiency Networking Engaged with tech leaders from banks, startups, and cloud-native companies Shared best practices with peers on application modernization and GenAI adoption Lessons Learned Modernization is a journey: phased, measurable, and business-driven Generative AI is a force multiplier — not just for code, but for documentation, testing, and security Security by design must be embedded early, not bolted on later Some event photos "},{"uri":"https://thienluhoan.github.io/workshop-template/4-eventparticipated/4.2-event2/","title":"Event 2","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nSummary Report: “GenAI-powered App-DB Modernization workshop” Event Objectives Share best practices in modern application design Introduce Domain-Driven Design (DDD) and event-driven architecture Provide guidance on selecting the right compute services Present AI tools to support the development lifecycle Speakers Jignesh Shah – Director, Open Source Databases Erica Liu – Sr. GTM Specialist, AppMod Fabrianne Effendi – Assc. Specialist SA, Serverless Amazon Web Services Key Highlights Identifying the drawbacks of legacy application architecture Long product release cycles → Lost revenue/missed opportunities Inefficient operations → Reduced productivity, higher costs Non-compliance with security regulations → Security breaches, loss of reputation Transitioning to modern application architecture – Microservices Migrating to a modular system — each function is an independent service communicating via events, built on three core pillars:\nQueue Management: Handle asynchronous tasks Caching Strategy: Optimize performance Message Handling: Flexible inter-service communication Domain-Driven Design (DDD) Four-step method: Identify domain events → arrange timeline → identify actors → define bounded contexts Bookstore case study: Demonstrates real-world DDD application Context mapping: 7 patterns for integrating bounded contexts Event-Driven Architecture 3 integration patterns: Publish/Subscribe, Point-to-point, Streaming Benefits: Loose coupling, scalability, resilience Sync vs async comparison: Understanding the trade-offs Compute Evolution Shared Responsibility Model: EC2 → ECS → Fargate → Lambda Serverless benefits: No server management, auto-scaling, pay-for-value Functions vs Containers: Criteria for appropriate choice Amazon Q Developer SDLC automation: From planning to maintenance Code transformation: Java upgrade, .NET modernization AWS Transform agents: VMware, Mainframe, .NET migration Key Takeaways Design Mindset Business-first approach: Always start from the business domain, not the technology Ubiquitous language: Importance of a shared vocabulary between business and tech teams Bounded contexts: Identifying and managing complexity in large systems Technical Architecture Event storming technique: Practical method for modeling business processes Use event-driven communication instead of synchronous calls Integration patterns: When to use sync, async, pub/sub, streaming Compute spectrum: Criteria for choosing between VM, containers, and serverless Modernization Strategy Phased approach: No rushing — follow a clear roadmap 7Rs framework: Multiple modernization paths depending on the application ROI measurement: Cost reduction + business agility Applying to Work Apply DDD to current projects: Event storming sessions with business teams Refactor microservices: Use bounded contexts to define service boundaries Implement event-driven patterns: Replace some sync calls with async messaging Adopt serverless: Pilot AWS Lambda for suitable use cases Try Amazon Q Developer: Integrate into the dev workflow to boost productivity Event Experience Attending the “GenAI-powered App-DB Modernization” workshop was extremely valuable, giving me a comprehensive view of modernizing applications and databases using advanced methods and tools. Key experiences included:\nLearning from highly skilled speakers Experts from AWS and major tech organizations shared best practices in modern application design. Through real-world case studies, I gained a deeper understanding of applying DDD and Event-Driven Architecture to large projects. Hands-on technical exposure Participating in event storming sessions helped me visualize how to model business processes into domain events. Learned how to split microservices and define bounded contexts to manage large-system complexity. Understood trade-offs between synchronous and asynchronous communication and integration patterns like pub/sub, point-to-point, streaming. Leveraging modern tools Explored Amazon Q Developer, an AI tool for SDLC support from planning to maintenance. Learned to automate code transformation and pilot serverless with AWS Lambda to improve productivity. Networking and discussions The workshop offered opportunities to exchange ideas with experts, peers, and business teams, enhancing the ubiquitous language between business and tech. Real-world examples reinforced the importance of the business-first approach rather than focusing solely on technology. Lessons learned Applying DDD and event-driven patterns reduces coupling while improving scalability and resilience. Modernization requires a phased approach with ROI measurement; rushing the process can be risky. AI tools like Amazon Q Developer can significantly boost productivity when integrated into the current workflow. Some event photos Add your event photos here\nOverall, the event not only provided technical knowledge but also helped me reshape my thinking about application design, system modernization, and cross-team collaboration.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/","title":"Internship Report","tags":[],"description":"","content":"Internship Report ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nStudent Information: Full Name: Quách Nguyễn Chí Hùng\nPhone Number: 076551890\nEmail: bacon3632@gmail.com\nUniversity: FPT University\nMajor: Information Technology\nClass: AWS082025\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 12/08/2025 to 12/11/2025\nReport Content Worklog Proposal Translated Blogs Events Participated Workshop Self-evaluation Sharing and Feedback "},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.1-workshop-overview/","title":"Introduction","tags":[],"description":"","content":"VPC endpoints VPC endpoints are virtual devices. They are horizontally scaled, redundant, and highly available VPC components. They allow communication between your compute resources and AWS services without imposing availability risks. Compute resources running in VPC can access Amazon S3 using a Gateway endpoint. PrivateLink interface endpoints can be used by compute resources running in VPC or on-premises. Workshop overview In this workshop, you will use two VPCs.\n\u0026ldquo;VPC Cloud\u0026rdquo; is for cloud resources such as a Gateway endpoint and an EC2 instance to test with. \u0026ldquo;VPC On-Prem\u0026rdquo; simulates an on-premises environment such as a factory or corporate datacenter. An EC2 instance running strongSwan VPN software has been deployed in \u0026ldquo;VPC On-prem\u0026rdquo; and automatically configured to establish a Site-to-Site VPN tunnel with AWS Transit Gateway. This VPN simulates connectivity from an on-premises location to the AWS cloud. To minimize costs, only one VPN instance is provisioned to support this workshop. When planning VPN connectivity for your production workloads, AWS recommends using multiple VPN devices for high availability. "},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.4-s3-onprem/5.4.1-prepare/","title":"Prepare the environment","tags":[],"description":"","content":"To prepare for this part of the workshop you will need to:\nDeploying a CloudFormation stack Modifying a VPC route table. These components work together to simulate on-premises DNS forwarding and name resolution.\nDeploy the CloudFormation stack The CloudFormation template will create additional services to support an on-premises simulation:\nOne Route 53 Private Hosted Zone that hosts Alias records for the PrivateLink S3 endpoint One Route 53 Inbound Resolver endpoint that enables \u0026ldquo;VPC Cloud\u0026rdquo; to resolve inbound DNS resolution requests to the Private Hosted Zone One Route 53 Outbound Resolver endpoint that enables \u0026ldquo;VPC On-prem\u0026rdquo; to forward DNS requests for S3 to \u0026ldquo;VPC Cloud\u0026rdquo; Click the following link to open the AWS CloudFormation console. The required template will be pre-loaded into the menu. Accept all default and click Create stack. It may take a few minutes for stack deployment to complete. You can continue with the next step without waiting for the deployemnt to finish.\nUpdate on-premise private route table This workshop uses a strongSwan VPN running on an EC2 instance to simulate connectivty between an on-premises datacenter and the AWS cloud. Most of the required components are provisioned before your start. To finalize the VPN configuration, you will modify the \u0026ldquo;VPC On-prem\u0026rdquo; routing table to direct traffic destined for the cloud to the strongSwan VPN instance.\nOpen the Amazon EC2 console\nSelect the instance named infra-vpngw-test. From the Details tab, copy the Instance ID and paste this into your text editor\nNavigate to the VPC menu by using the Search box at the top of the browser window.\nClick on Route Tables, select the RT Private On-prem route table, select the Routes tab, and click Edit Routes.\nClick Add route. Destination: your Cloud VPC cidr range Target: ID of your infra-vpngw-test instance (you saved in your editor at step 1) Click Save changes "},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.1-week1/","title":"Week 1 Worklog","tags":[],"description":"","content":"Week 1 Objectives: Get to know with members of First Cloud Journey. Take notes on FCJ regulation and basic AWS technologies and Spring Boot. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 09/08/2025 09/08/2025 3 - Create AWS accounts and setup INTELJI for Spring Boot 09/09/2025 09/09/2025 4 - Learn simple AWS services:\n+ Database\n+ EC2 - Learn simple RESTFUL API ports in Spring Boot:\n+ POST\n+ GET\n+ PATCH(PUT) + DELETE 09/10/2025 09/10/2025 https://www.youtube.com/watch?v=e7XeKdOVq40\u0026amp;list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026amp;index=73 5 - Learn about keeping budget in AWS to avoid wasting money and learn Microsoft SQL Server dependency in Spring Boot 09/11/2025 09/11/2025 https://www.youtube.com/watch?v=_a09nLVw6Sg\u0026amp;list=PLahN4TLWtox2a3vElknwzU_urND8hLn1i\u0026amp;index=15 6 Practice:\n+ Launch an EC2 instance using AWS Management Console.\n+ Configure instance type, AMI, key pair, and security group.\n+ Gain hands-on experience with EC2 and EBS concepts. 09/12/2025 09/12/2025 https://www.youtube.com/watch?v=iHX-jtKIVNA Week 1 Achievements: Understood what AWS is and learned the basic service: Storage Networking Database Successfully created and configured an AWS account , as well as setup INTELIJI for spring Boot. Became familiar with the AWS Management Console and learned how to find, access, and use services via the web interface. Built a simple Spring Boot project to get to know API "},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.2-week2/","title":"Week 2 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 2 Objectives: Discuss and decide on project idea and scope with the group. Choose the programming language/tech stack for the project. Learn MS SQL basics (installation, schema/tables, CRUD, simple queries). Practice installing dependencies and setting up the project environment. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Group discussion: project ideas \u0026amp; scope - Choose programming language/tech stack - Security fundamentals: authentication vs authorization, least privilege, MFA, password hygiene 09/16/2025 09/16/2025 3 - Learn core security concepts (Network Security): + TCP/IP basics \u0026amp; common ports + Firewalls and VPN basics + IDS/IPS overview + Network segmentation 09/17/2025 09/17/2025 4 - Security tooling \u0026amp; practices: + OS hardening basics (Windows/Linux) + Configure local firewall/antivirus + Password manager setup - Practice (Java): + Secure dependency management with Maven/Gradle (pin versions, checksums) + Initialize Java project skeleton (Gradle or Maven) + Use application.properties/.yaml for config and keep secrets out of source (gitignore) 09/18/2025 09/18/2025 5 - Database Security fundamentals: + Principle of least privilege (roles/permissions) + SQL injection prevention (parameterized queries) + Basic encryption in transit/at rest + Design simple ERD with security in mind 09/19/2025 09/19/2025 6 - Practice (secure coding, Java): + Add MS SQL JDBC driver (mssql-jdbc) and configure DataSource + Add JPA/Hibernate or MyBatis and implement parameterized CRUD + Input validation (Jakarta Validation) \u0026amp; exception handling + Secrets management (use env variables/system props; no secrets in code) + Static analysis/formatting: SpotBugs, Checkstyle (or SonarLint); document findings 09/19/2025 09/19/2025 Week 2 Achievements: \u0026hellip;\nAligned with the group on project idea/scope and selected the programming language/tech stack.\nLearned MS SQL basics:\nInstallation and environment setup (e.g., SQL Server/SSMS or equivalent) Create databases and tables Write basic CRUD and simple JOIN queries Practiced installing and managing dependencies for Spring Boot; initialized a minimal project skeleton.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.3-week3/","title":"Week 3 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 3 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Reviewed React and its basic components + Functional Components + Class Components + Props and State management + Event Handling + Component Lifecycle 09/22/2025 09/22/2025 3 - Studied TypeScript on interfaces, types, and classes + Interface declarations and type aliases + Generic types + Union and intersection types + Class inheritance and access modifiers 09/23/2025 09/23/2025 4 - Learned TypeScript on static data and related concepts + Static properties and methods + Readonly properties + Enum types + Utility types (Partial, Required, Pick) 09/24/2025 09/24/2025 5 - Discussed the FFF clothing sales project + Analyzed requirements and user stories + Designed UI/UX mockups + Selected frontend tech stack + Planned sprints and timeline 09/25/2025 09/25/2025 6 - Assigned to handle frontend development for the FFF project + Setup development environment + Initialized React project with TypeScript + Installed necessary dependencies + Created basic component structure 09/26/2025 09/26/2025 Week 3 Achievements: Successfully reviewed React:\nMastered Functional Components and Class Components Understood Props and State management clearly Proficient in Event Handling in React Grasped Component Lifecycle and basic hooks Learned TypeScript fundamentals:\nDeclared and used interfaces, type aliases Understood and applied Generic types Mastered Union and intersection types Used Class inheritance and access modifiers Advanced TypeScript knowledge:\nUsed Static properties and methods Understood Readonly properties and immutability Worked with Enum types Applied Utility types (Partial, Required, Pick) Participated in FFF project:\nAnalyzed requirements and user stories Participated in UI/UX mockup design Contributed to frontend tech stack selection Planned detailed sprints and timeline Prepared development environment:\nSetup complete development environment Initialized React project with TypeScript configuration Installed and configured necessary dependencies Created component structure and folder organization Ready to start frontend development for FFF project "},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.4-week4/","title":"Week 4 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 4 Objectives: Learn and practice AWS security. Explore and experience AWS Lightsail service. Design and complete UI with React Vite. Connect React Vite UI with Spring Boot backend. Integrate Spring Boot backend with MSSQL database. Master the process of connecting frontend-backend-database and test the entire data flow. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Learn about AWS security - Explore Lightsail service - Start designing UI with React Vite 09/29/2025 09/29/2025 3 - Continue completing React Vite UI - Learn about connecting to Spring Boot backend 09/30/2025 09/30/2025 4 - Connect React Vite UI with Spring Boot backend - Learn about integrating MSSQL 10/01/2025 10/01/2025 5 - Complete backend connection with MSSQL - Test the entire connection flow 10/02/2025 10/02/2025 6 - Finalize and polish UI/UX - Write user guide documentation - Review security and Lightsail 10/03/2025 10/03/2025 Week 4 Achievements: Learned and understood AWS security, grasped basic cloud security concepts. Explored and practiced with AWS Lightsail service. Completed UI with React Vite, with a friendly and modern interface. Successfully connected React Vite UI with Spring Boot backend. Integrated Spring Boot backend with MSSQL database, successfully tested the entire data flow. Wrote user guide documentation and summarized the knowledge learned during the week. "},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.5-week5/","title":"Week 5 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 5 Objectives: Discuss AI integration strategies with the team using API connections. Complete database implementation with MSSQL for the project system. Prepare comprehensively for the AWS knowledge mid-term examination. Review and consolidate AWS concepts learned in previous weeks. Tasks to be carried out this week: Tasks to be implemented this week: Day Tasks Start Date Completion Date Reference Material 2 - Hold team meeting to discuss AI integration - Research suitable AI APIs for the system - Define integration points and data flow architecture 10/06/2025 10/06/2025 3 - Design MSSQL database schema - Create and configure tables with proper relationships - Test database connections 10/07/2025 10/07/2025 4 - Implement CRUD operations with MSSQL - Integrate database into existing system - Test and optimize performance 10/08/2025 10/08/2025 5 - Study AWS core services (EC2, S3, RDS, Lambda, IAM) - Learn AWS networking concepts and VPC - Practice AWS CLI and automation scripts 10/09/2025 10/09/2025 6 - Complete AWS exam preparation - Take practice exams and assess knowledge - Review and validate AI integration and database work 10/10/2025 10/10/2025 Week 5 Achievements: Successfully conducted team discussions on AI integration strategies:\nIdentified suitable AI APIs for system enhancement Defined integration points and data flow architecture Established timeline for AI implementation phases Researched authentication and security requirements for AI APIs Completed comprehensive MSSQL database implementation:\nDesigned and implemented normalized database schema Successfully created all required tables with proper relationships Established database connections with connection pooling Implemented and tested full CRUD operations Integrated database seamlessly with existing system components Thoroughly prepared for AWS mid-term examination:\nMastered core AWS services (EC2, S3, RDS, Lambda, IAM) Understood AWS networking concepts including VPC, subnets, and security groups Practiced AWS CLI commands and automation scripts Studied AWS pricing models and cost optimization strategies Completed multiple practice exams with high confidence level Enhanced project development skills:\nImproved database design and optimization techniques Strengthened API integration and system architecture knowledge Developed better understanding of cloud-native application patterns "},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.6-week6/","title":"Week 6 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 6 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 10/13/2025 10/13/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 10/14/2025 10/14/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 10/15/2025 10/15/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 10/16/2025 10/16/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 10/17/2025 10/17/2025 https://cloudjourney.awsstudygroup.com/ Week 6 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.7-week7/","title":"Week 7 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 7 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 7 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.8-week8/","title":"Week 8 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 8 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 8 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.9-week9/","title":"Week 9 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 9 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 9 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/","title":"Worklog","tags":[],"description":"","content":"On this page, you will need to introduce your worklog. How did you complete it? How many weeks did you take to complete the program? What did you do in those weeks?\nTypically, and as a standard, a worklog is carried out over about 3 months (throughout the internship period) with weekly contents as follows:\nWeek 1: Taking notes on FCJ regulation and learn basic AWS lessons\nWeek 2: Doing task A\u0026hellip;\nWeek 3: Doing task B\u0026hellip;\nWeek 4: Doing task C\u0026hellip;\nWeek 5: Doing task D\u0026hellip;\nWeek 6: Doing task E\u0026hellip;\nWeek 7: Doing task G\u0026hellip;\nWeek 8: Doing task H\u0026hellip;\nWeek 9: Doing task I\u0026hellip;\nWeek 10: Doing task L\u0026hellip;\nWeek 11: Doing task M\u0026hellip;\nWeek 12: Doing task N\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.4-s3-onprem/5.4.2-create-interface-enpoint/","title":"Create an S3 Interface endpoint","tags":[],"description":"","content":"In this section you will create and test an S3 interface endpoint using the simulated on-premises environment deployed as part of this workshop.\nReturn to the Amazon VPC menu. In the navigation pane, choose Endpoints, then click Create Endpoint.\nIn Create endpoint console:\nName the interface endpoint In Service category, choose aws services In the Search box, type S3 and press Enter. Select the endpoint named com.amazonaws.us-east-1.s3. Ensure that the Type column indicates Interface. For VPC, select VPC Cloud from the drop-down. Make sure to choose \u0026ldquo;VPC Cloud\u0026rdquo; and not \u0026ldquo;VPC On-prem\u0026rdquo;\nExpand Additional settings and ensure that Enable DNS name is not selected (we will use this in the next part of the workshop) Select 2 subnets in the following AZs: us-east-1a and us-east-1b For Security group, choose SGforS3Endpoint: Keep the default policy - full access and click Create endpoint Congratulation on successfully creating S3 interface endpoint. In the next step, we will test the interface endpoint.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.2-prerequiste/","title":"Prerequiste","tags":[],"description":"","content":"IAM permissions Add the following IAM permission policy to your user account to deploy and cleanup this workshop.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudformation:*\u0026#34;, \u0026#34;cloudwatch:*\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:AcceptTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:AllocateAddress\u0026#34;, \u0026#34;ec2:AssociateAddress\u0026#34;, \u0026#34;ec2:AssociateIamInstanceProfile\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:AssociateSubnetCidrBlock\u0026#34;, \u0026#34;ec2:AssociateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:AssociateVpcCidrBlock\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34;, \u0026#34;ec2:AttachNetworkInterface\u0026#34;, \u0026#34;ec2:AttachVolume\u0026#34;, \u0026#34;ec2:AttachVpnGateway\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:CreateClientVpnEndpoint\u0026#34;, \u0026#34;ec2:CreateClientVpnRoute\u0026#34;, \u0026#34;ec2:CreateCustomerGateway\u0026#34;, \u0026#34;ec2:CreateDhcpOptions\u0026#34;, \u0026#34;ec2:CreateFlowLogs\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:CreateLaunchTemplate\u0026#34;, \u0026#34;ec2:CreateNetworkAcl\u0026#34;, \u0026#34;ec2:CreateNetworkInterface\u0026#34;, \u0026#34;ec2:CreateNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:CreateRoute\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:CreateSubnetCidrReservation\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34;, \u0026#34;ec2:CreateTransitGateway\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:CreateTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRoute\u0026#34;, \u0026#34;ec2:CreateTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:CreateTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:CreateVpc\u0026#34;, \u0026#34;ec2:CreateVpcEndpoint\u0026#34;, \u0026#34;ec2:CreateVpcEndpointConnectionNotification\u0026#34;, \u0026#34;ec2:CreateVpcEndpointServiceConfiguration\u0026#34;, \u0026#34;ec2:CreateVpnConnection\u0026#34;, \u0026#34;ec2:CreateVpnConnectionRoute\u0026#34;, \u0026#34;ec2:CreateVpnGateway\u0026#34;, \u0026#34;ec2:DeleteCustomerGateway\u0026#34;, \u0026#34;ec2:DeleteFlowLogs\u0026#34;, \u0026#34;ec2:DeleteInternetGateway\u0026#34;, \u0026#34;ec2:DeleteNetworkInterface\u0026#34;, \u0026#34;ec2:DeleteNetworkInterfacePermission\u0026#34;, \u0026#34;ec2:DeleteRoute\u0026#34;, \u0026#34;ec2:DeleteRouteTable\u0026#34;, \u0026#34;ec2:DeleteSecurityGroup\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnetCidrReservation\u0026#34;, \u0026#34;ec2:DeleteTags\u0026#34;, \u0026#34;ec2:DeleteTransitGateway\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPeeringAttachment\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayPrefixListReference\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRoute\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayRouteTable\u0026#34;, \u0026#34;ec2:DeleteTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:DeleteVpc\u0026#34;, \u0026#34;ec2:DeleteVpcEndpoints\u0026#34;, \u0026#34;ec2:DeleteVpcEndpointServiceConfigurations\u0026#34;, \u0026#34;ec2:DeleteVpnConnection\u0026#34;, \u0026#34;ec2:DeleteVpnConnectionRoute\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:DetachInternetGateway\u0026#34;, \u0026#34;ec2:DisassociateAddress\u0026#34;, \u0026#34;ec2:DisassociateRouteTable\u0026#34;, \u0026#34;ec2:GetLaunchTemplateData\u0026#34;, \u0026#34;ec2:GetTransitGatewayAttachmentPropagations\u0026#34;, \u0026#34;ec2:ModifyInstanceAttribute\u0026#34;, \u0026#34;ec2:ModifySecurityGroupRules\u0026#34;, \u0026#34;ec2:ModifyTransitGatewayVpcAttachment\u0026#34;, \u0026#34;ec2:ModifyVpcAttribute\u0026#34;, \u0026#34;ec2:ModifyVpcEndpoint\u0026#34;, \u0026#34;ec2:ReleaseAddress\u0026#34;, \u0026#34;ec2:ReplaceRoute\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsEgress\u0026#34;, \u0026#34;ec2:UpdateSecurityGroupRuleDescriptionsIngress\u0026#34;, \u0026#34;iam:AddRoleToInstanceProfile\u0026#34;, \u0026#34;iam:AttachRolePolicy\u0026#34;, \u0026#34;iam:CreateInstanceProfile\u0026#34;, \u0026#34;iam:CreatePolicy\u0026#34;, \u0026#34;iam:CreateRole\u0026#34;, \u0026#34;iam:DeleteInstanceProfile\u0026#34;, \u0026#34;iam:DeletePolicy\u0026#34;, \u0026#34;iam:DeleteRole\u0026#34;, \u0026#34;iam:DeleteRolePolicy\u0026#34;, \u0026#34;iam:DetachRolePolicy\u0026#34;, \u0026#34;iam:GetInstanceProfile\u0026#34;, \u0026#34;iam:GetPolicy\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetRolePolicy\u0026#34;, \u0026#34;iam:ListPolicyVersions\u0026#34;, \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;iam:PutRolePolicy\u0026#34;, \u0026#34;iam:RemoveRoleFromInstanceProfile\u0026#34;, \u0026#34;lambda:CreateFunction\u0026#34;, \u0026#34;lambda:DeleteFunction\u0026#34;, \u0026#34;lambda:DeleteLayerVersion\u0026#34;, \u0026#34;lambda:GetFunction\u0026#34;, \u0026#34;lambda:GetLayerVersion\u0026#34;, \u0026#34;lambda:InvokeFunction\u0026#34;, \u0026#34;lambda:PublishLayerVersion\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:DeleteLogGroup\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34;, \u0026#34;logs:PutRetentionPolicy\u0026#34;, \u0026#34;route53:ChangeTagsForResource\u0026#34;, \u0026#34;route53:CreateHealthCheck\u0026#34;, \u0026#34;route53:CreateHostedZone\u0026#34;, \u0026#34;route53:CreateTrafficPolicy\u0026#34;, \u0026#34;route53:DeleteHostedZone\u0026#34;, \u0026#34;route53:DisassociateVPCFromHostedZone\u0026#34;, \u0026#34;route53:GetHostedZone\u0026#34;, \u0026#34;route53:ListHostedZones\u0026#34;, \u0026#34;route53domains:ListDomains\u0026#34;, \u0026#34;route53domains:ListOperations\u0026#34;, \u0026#34;route53domains:ListTagsForDomain\u0026#34;, \u0026#34;route53resolver:AssociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:AssociateResolverRule\u0026#34;, \u0026#34;route53resolver:CreateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:CreateResolverRule\u0026#34;, \u0026#34;route53resolver:DeleteResolverEndpoint\u0026#34;, \u0026#34;route53resolver:DeleteResolverRule\u0026#34;, \u0026#34;route53resolver:DisassociateResolverEndpointIpAddress\u0026#34;, \u0026#34;route53resolver:DisassociateResolverRule\u0026#34;, \u0026#34;route53resolver:GetResolverEndpoint\u0026#34;, \u0026#34;route53resolver:GetResolverRule\u0026#34;, \u0026#34;route53resolver:ListResolverEndpointIpAddresses\u0026#34;, \u0026#34;route53resolver:ListResolverEndpoints\u0026#34;, \u0026#34;route53resolver:ListResolverRuleAssociations\u0026#34;, \u0026#34;route53resolver:ListResolverRules\u0026#34;, \u0026#34;route53resolver:ListTagsForResource\u0026#34;, \u0026#34;route53resolver:UpdateResolverEndpoint\u0026#34;, \u0026#34;route53resolver:UpdateResolverRule\u0026#34;, \u0026#34;s3:AbortMultipartUpload\u0026#34;, \u0026#34;s3:CreateBucket\u0026#34;, \u0026#34;s3:DeleteBucket\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:GetAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:GetBucketAcl\u0026#34;, \u0026#34;s3:GetBucketOwnershipControls\u0026#34;, \u0026#34;s3:GetBucketPolicy\u0026#34;, \u0026#34;s3:GetBucketPolicyStatus\u0026#34;, \u0026#34;s3:GetBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:GetObjectVersion\u0026#34;, \u0026#34;s3:GetBucketVersioning\u0026#34;, \u0026#34;s3:ListAccessPoints\u0026#34;, \u0026#34;s3:ListAccessPointsForObjectLambda\u0026#34;, \u0026#34;s3:ListAllMyBuckets\u0026#34;, \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:ListBucketMultipartUploads\u0026#34;, \u0026#34;s3:ListBucketVersions\u0026#34;, \u0026#34;s3:ListJobs\u0026#34;, \u0026#34;s3:ListMultipartUploadParts\u0026#34;, \u0026#34;s3:ListMultiRegionAccessPoints\u0026#34;, \u0026#34;s3:ListStorageLensConfigurations\u0026#34;, \u0026#34;s3:PutAccountPublicAccessBlock\u0026#34;, \u0026#34;s3:PutBucketAcl\u0026#34;, \u0026#34;s3:PutBucketPolicy\u0026#34;, \u0026#34;s3:PutBucketPublicAccessBlock\u0026#34;, \u0026#34;s3:PutObject\u0026#34;, \u0026#34;secretsmanager:CreateSecret\u0026#34;, \u0026#34;secretsmanager:DeleteSecret\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetSecretValue\u0026#34;, \u0026#34;secretsmanager:ListSecrets\u0026#34;, \u0026#34;secretsmanager:ListSecretVersionIds\u0026#34;, \u0026#34;secretsmanager:PutResourcePolicy\u0026#34;, \u0026#34;secretsmanager:TagResource\u0026#34;, \u0026#34;secretsmanager:UpdateSecret\u0026#34;, \u0026#34;sns:ListTopics\u0026#34;, \u0026#34;ssm:DescribeInstanceProperties\u0026#34;, \u0026#34;ssm:DescribeSessions\u0026#34;, \u0026#34;ssm:GetConnectionStatus\u0026#34;, \u0026#34;ssm:GetParameters\u0026#34;, \u0026#34;ssm:ListAssociations\u0026#34;, \u0026#34;ssm:ResumeSession\u0026#34;, \u0026#34;ssm:StartSession\u0026#34;, \u0026#34;ssm:TerminateSession\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Provision resources using CloudFormation In this lab, we will use N.Virginia region (us-east-1).\nTo prepare the workshop environment, deploy this CloudFormation Template (click link): PrivateLinkWorkshop . Accept all of the defaults when deploying the template.\nTick 2 acknowledgement boxes Choose Create stack The ClouddFormation deployment requires about 15 minutes to complete.\n2 VPCs have been created 3 EC2s have been created "},{"uri":"https://thienluhoan.github.io/workshop-template/2-proposal/","title":"Proposal","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nIn this section, you need to summarize the contents of the workshop that you plan to conduct.\nFashion Selling: FFF 1. Executive Summary The proposed solution is a web platform for fashion sales developed on AWS, utilizing serverless technology and AI to manage a secure, stable, cost-optimized, and easily scalable e-commerce system.\n2. Problem Statement Current Problem\nSmall businesses or startups often lack the budget to build complex infrastructure.\nOperating traditional servers is expensive (hardware, maintenance, operations personnel).\nWhen customer numbers surge, traditional systems are prone to overload, causing service disruptions.\nLack of AI for product recommendations, consulting chatbots, or data systems to support decision-making.\nDifficult to track customer behavior, optimize sales, and marketing.\nSolution\nServerless architecture → automatic scaling, cost optimization, no need to manage complex infrastructure.\nEnsure safety, stability, high availability through secure and monitored AWS services.\nSuitable for small and medium enterprises needing to test the market before large investments.\nOnly $50–100/month, helping reduce financial risk.\nAI Chatbot supports customers 24/7, reduces consulting staff load, increases satisfaction, product recommendations help increase conversion rates and order value.\n3. Solution Architecture AWS Services Used 1. Frontend (Web + CDN) Amazon S3 → Store and host static web (Next.js build). Helps reduce costs, no need for traditional web servers. Amazon CloudFront → Global CDN content distribution, SSL support, reduce page load latency. Amazon Route 53 → Manage domain, DNS, route traffic to CloudFront/S3. 2. Backend \u0026amp; API Amazon API Gateway → API gateway receives requests from frontend, routes to Lambda/Fargate. AWS Lambda → Run serverless code (Node.js, Python\u0026hellip;) for APIs without servers. Amazon ECS Fargate → Run container backend (if there are complex services, need longer runtime than Lambda). Amazon ECR → Store Docker images for ECS Fargate to pull and run. 3. Database \u0026amp; Storage Amazon RDS (PostgreSQL) → Main relational database (store users, products, orders\u0026hellip;). Amazon DynamoDB → NoSQL database to store sessions, metadata, light cache. Amazon S3 → Store product images, invoices, analytics data (data lake). Amazon ElastiCache (Redis) → In-memory cache to speed up data reads, hold temporary sessions. 4. Search \u0026amp; Events Amazon OpenSearch → Search engine for products, log analytics. Amazon SQS → Queue to process orders or async tasks (reduce load on main API). Amazon SNS → Send notifications (email, SMS, push) when events occur. Amazon EventBridge → Event bus to connect services (e.g., trigger AI pipeline when new order). 5. AI \u0026amp; Machine Learning Amazon Personalize → Create personalized product recommendations for each customer. Amazon Lex → AI chatbot to support customers 24/7. Amazon Comprehend → Analyze emotions and keywords in customer reviews. Amazon Fraud Detector → Detect fraudulent transactions. Amazon Forecast → Forecast inventory and sales demand (deploy in later phase). Amazon SageMaker → Train/deploy custom ML models if default AI solutions are insufficient. 6. Data Lake \u0026amp; ETL Amazon S3 (Data Lake) → Store raw + processed data for analytics. AWS Glue → ETL jobs to clean and standardize data. Amazon Athena → Query data directly on S3 with SQL (serverless). AWS Lake Formation → Manage data access permissions in the data lake. Amazon Kinesis → Collect real-time events, clickstreams from users. 7. Authentication \u0026amp; Security Amazon Cognito → Registration, login, user pool management (SSO, OAuth2). AWS IAM → Manage roles and access permissions between services. AWS KMS → Encrypt data in RDS, S3, DynamoDB. AWS Secrets Manager → Store API keys, DB passwords, automatic secret rotation. AWS WAF → Filter bad requests, protect against OWASP Top 10 attacks. AWS Shield → Protect against DDoS attacks. 8. Observability \u0026amp; Monitoring Amazon CloudWatch → Collect logs, metrics, set up alerts. AWS X-Ray → Trace requests end-to-end, find bottlenecks. Amazon Managed Grafana → Visualize metrics, logs dashboards. OpenSearch Dashboards → Interface to search \u0026amp; analyze logs from OpenSearch. Amazon SNS → Send alerts on errors or threshold exceedances. 9. CI/CD \u0026amp; IaC Terraform / AWS CDK → IaC (Infrastructure as Code) for automatic infrastructure deployment. GitHub Actions → CI/CD pipeline: lint → test → build → deploy to AWS. Amazon CodeArtifact (optional) → Manage private package repository. 10. Backup \u0026amp; DR Amazon RDS Snapshot → Automatic database backup. Amazon S3 Versioning + Cross-Region Replication → Backup files and data lake to another region (DR). 4. Technical Implementation Implementation Phases\n1. Tech Lead / Architect Week 0–2\nDesign architecture: VPC, RDS, S3, Cognito, OpenSearch. Write architecture documentation + network diagrams. Review Terraform modules. Week 3–12\nCode review, approve PRs. Ensure SLO: latency, error budget, cost. Test DR drill, review runbooks. ✅ Deliverables:\nDiagram, architecture documentation SLO/SLA IAM model 2. Frontend Engineer Week 1–2\nScaffold Vite project (JavaScript + Bootstrap). Integrate Cognito auth (login/signup). Week 3–6\nBuild UI: home, product list, product detail, cart, checkout. Upload images via S3 pre-signed URL. Week 7–9\nIntegrate chatbot widget (Lex). Integrate product recommendations from Personalize. Week 10–12\nE2E tests (Playwright). Optimize SEO + Lighthouse (\u0026gt;= 90). Deploy build → CloudFront. ✅ Deliverables:\nWeb source code Complete UI Test report Production build 3. Backend Engineer Week 1–3\nScaffold NestJS API, define OpenAPI spec. Design DB schema (Postgres, Prisma migration). Week 4–6\nAPI: products, cart, orders. Payment integration (stub). Upload media (S3). Week 7–9\nLambda consumer for SQS (order events). Recommendation API (Personalize). Fraud Detector scoring API. Week 10–12\nHardening: rate limit, validation. Integration tests (Jest + Supertest). Blue/green deployment support. ✅ Deliverables:\nOpenAPI docs Tested APIs DB migrations Docker image 4. DevOps / SRE Week 0–2\nRepo /infra + Terraform skeleton. Setup GitHub Actions (lint → test → plan → apply). State backend: S3 + DynamoDB lock. Week 3–6\nProvision VPC, RDS, S3, Cognito, OpenSearch. Deploy staging environment. Week 7–9\nMonitoring: Grafana dashboards. Alerts: SNS → Slack/email. Backup policies: RDS snapshots, S3 versioning. Week 10–12\nDR drill (restore RDS, cross-region S3). Cost alerts, rightsizing. Prod cutover: Route53 switch. ✅ Deliverables:\nTerraform repo CI/CD pipelines Monitoring dashboards Runbooks 5. Data / ML Engineer Week 1–3\nDesign event schema (click, view, purchase). Pipeline: Kinesis → S3 raw. Glue job ETL → Parquet. Week 4–6\nFeed data into Personalize. Train + deploy campaign. Week 7–9\nChatbot Lex intents: FAQ, order tracking, product recommendations. Fulfillment Lambda: query RDS, call Personalize API. Week 10–12\nForecast model for inventory. Model Monitor (drift detection). Evaluation report. ✅ Deliverables:\nETL jobs + Parquet data Personalize campaign + chatbot intents Forecast model + monitoring Evaluation report 5. Timeline \u0026amp; Milestones Pre-Internship (Month 0): 1 month for planning and evaluating old stations. Internship (Months 1–3): Month 1: Learn AWS and upgrade hardware. Month 2: Design and adjust architecture. Month 3: Implement, test, and launch. 6. Budget Estimation You can find the budget estimation on the AWS Pricing Calculator\nOr download the Budget Estimation File.\nInfrastructure Costs\nAWS Lambda: $0.00/month (1,000 requests, 512 MB storage). S3 Standard: $0.15/month (6 GB, 2,100 requests, 1 GB scanned). Data Transfer: $0.02/month (1 GB inbound, 1 GB outbound). AWS Amplify: $0.35/month (256 MB, 500 ms requests). Amazon API Gateway: $0.01/month (2,000 requests). AWS Glue ETL Jobs: $0.02/month (2 DPUs). AWS Glue Crawlers: $0.07/month (1 crawler). MQTT (IoT Core): $0.08/month (5 devices, 45,000 messages). Total: $0.7/month, $8.40/12 months\nHardware: $265 one-time (Raspberry Pi 5 and sensors). 7. Risk Assessment Risk Matrix\nNetwork Loss: Medium impact, medium probability. Sensor Failure: High impact, low probability. Budget Overrun: Medium impact, low probability. Mitigation Strategies\nNetwork: Local storage on Raspberry Pi with Docker. Sensors: Regular checks, spare parts. Cost: AWS budget alerts, service optimization. Contingency Plans\nRevert to manual collection if AWS fails. Use CloudFormation to restore cost-related configurations. 8. Expected Outcomes Technical Improvements: Real-time data and analytics replace manual processes. Scalable to 10–15 stations.\nLong-term Value: 1-year data foundation for AI research, reusable for future projects.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.3-s3-vpc/5.3.2-test-gwe/","title":"Test the Gateway Endpoint","tags":[],"description":"","content":"Create S3 bucket Navigate to S3 management console In the Bucket console, choose Create bucket In the Create bucket console Name the bucket: choose a name that hasn\u0026rsquo;t been given to any bucket globally (hint: lab number and your name) Leave other fields as they are (default) Scroll down and choose Create bucket Successfully create S3 bucket. Connect to EC2 with session manager For this workshop, you will use AWS Session Manager to access several EC2 instances. Session Manager is a fully managed AWS Systems Manager capability that allows you to manage your Amazon EC2 instances and on-premises virtual machines (VMs) through an interactive one-click browser-based shell. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.\nFirst cloud journey Lab for indepth understanding of Session manager.\nIn the AWS Management Console, start typing Systems Manager in the quick search box and press Enter: From the Systems Manager menu, find Node Management in the left menu and click Session Manager: Click Start Session, and select the EC2 instance named Test-Gateway-Endpoint. This EC2 instance is already running in \u0026ldquo;VPC Cloud\u0026rdquo; and will be used to test connectivity to Amazon S3 through the Gateway endpoint you just created (s3-gwe).\nSession Manager will open a new browser tab with a shell prompt: sh-4.2 $\nYou have successfully start a session - connect to the EC2 instance in VPC cloud. In the next step, we will create a S3 bucket and a file in it.\nCreate a file and upload to s3 bucket Change to the ssm-user\u0026rsquo;s home directory by typing cd ~ in the CLI Create a new file to use for testing with the command fallocate -l 1G testfile.xyz, which will create a file of 1GB size named \u0026ldquo;testfile.xyz\u0026rdquo;. Upload file to S3 bucket with command aws s3 cp testfile.xyz s3://your-bucket-name. Replace your-bucket-name with the name of S3 bucket that you created earlier. You have successfully uploaded the file to your S3 bucket. You can now terminate the session.\nCheck object in S3 bucket Navigate to S3 console. Click the name of your s3 bucket In the Bucket console, you will see the file you have uploaded to your S3 bucket Section summary Congratulation on completing access to S3 from VPC. In this section, you created a Gateway endpoint for Amazon S3, and used the AWS CLI to upload an object. The upload worked because the Gateway endpoint allowed communication to S3, without needing an Internet Gateway attached to \u0026ldquo;VPC Cloud\u0026rdquo;. This demonstrates the functionality of the Gateway endpoint as a secure path to S3 without traversing the Public Internet.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.10-week10/","title":"Week 10 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 10 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 10 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.11-week11/","title":"Week 11 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 11 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 11 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/1-worklog/1.12-week12/","title":"Week 12 Worklog","tags":[],"description":"","content":" ⚠️ Note: The following information is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nWeek 12 Objectives: Connect and get acquainted with members of First Cloud Journey. Understand basic AWS services, how to use the console \u0026amp; CLI. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 1 - Orientation and introduction to internship program - Setup working environment 08/10/2025 08/10/2025 2 - Get to know with FCJ members - Read and take note of internship unit rules and regulations 08/11/2025 08/11/2025 3 - Learn about AWS and its types of services + Compute + Storage + Networking + Database + \u0026hellip; 08/12/2025 08/12/2025 https://cloudjourney.awsstudygroup.com/ 4 - Create AWS Free Tier account - Learn about AWS Console \u0026amp; AWS CLI - Practice: + Create AWS account + Install \u0026amp; configure AWS CLI + How to use AWS CLI 08/13/2025 08/13/2025 https://cloudjourney.awsstudygroup.com/ 5 - Learn basic EC2: + Instance types + AMI + EBS + \u0026hellip; - SSH connection methods to EC2 - Learn about Elastic IP 08/14/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 6 - Practice: + Launch an EC2 instance + Connect via SSH + Attach an EBS volume 08/15/2025 08/15/2025 https://cloudjourney.awsstudygroup.com/ 7 - Weekly review and Q\u0026amp;A session - Prepare summary report for Week 1 08/16/2025 08/16/2025 Week 12 Achievements: Understood what AWS is and mastered the basic service groups:\nCompute Storage Networking Database \u0026hellip; Successfully created and configured an AWS Free Tier account.\nBecame familiar with the AWS Management Console and learned how to find, access, and use services via the web interface.\nInstalled and configured AWS CLI on the computer, including:\nAccess Key Secret Key Default Region \u0026hellip; Used AWS CLI to perform basic operations such as:\nCheck account \u0026amp; configuration information Retrieve the list of regions View EC2 service Create and manage key pairs Check information about running services \u0026hellip; Acquired the ability to connect between the web interface and CLI to manage AWS resources in parallel.\n\u0026hellip;\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.3-s3-vpc/","title":"Access S3 from VPC","tags":[],"description":"","content":"Using Gateway endpoint In this section, you will create a Gateway eendpoint to access Amazon S3 from an EC2 instance. The Gateway endpoint will allow upload an object to S3 buckets without using the Public Internet. To create an endpoint, you must specify the VPC in which you want to create the endpoint, and the service (in this case, S3) to which you want to establish the connection.\nContent Create gateway endpoint Test gateway endpoint "},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.4-s3-onprem/5.4.3-test-endpoint/","title":"Test the Interface Endpoint","tags":[],"description":"","content":"Get the regional DNS name of S3 interface endpoint From the Amazon VPC menu, choose Endpoints.\nClick the name of newly created endpoint: s3-interface-endpoint. Click details and save the regional DNS name of the endpoint (the first one) to your text-editor for later use.\nConnect to EC2 instance in \u0026ldquo;VPC On-prem\u0026rdquo; Navigate to Session manager by typing \u0026ldquo;session manager\u0026rdquo; in the search box\nClick Start Session, and select the EC2 instance named Test-Interface-Endpoint. This EC2 instance is running in \u0026ldquo;VPC On-prem\u0026rdquo; and will be used to test connectivty to Amazon S3 through the Interface endpoint we just created. Session Manager will open a new browser tab with a shell prompt: sh-4.2 $\nChange to the ssm-user\u0026rsquo;s home directory with command \u0026ldquo;cd ~\u0026rdquo;\nCreate a file named testfile2.xyz\nfallocate -l 1G testfile2.xyz Copy file to the same S3 bucket we created in section 3.2 aws s3 cp --endpoint-url https://bucket.\u0026lt;Regional-DNS-Name\u0026gt; testfile2.xyz s3://\u0026lt;your-bucket-name\u0026gt; This command requires the \u0026ndash;endpoint-url parameter, because you need to use the endpoint-specific DNS name to access S3 using an Interface endpoint. Do not include the leading \u0026rsquo; * \u0026rsquo; when copying/pasting the regional DNS name. Provide your S3 bucket name created earlier Now the file has been added to your S3 bucket. Let check your S3 bucket in the next step.\nCheck Object in S3 bucket Navigate to S3 console Click Buckets Click the name of your bucket and you will see testfile2.xyz has been added to your bucket "},{"uri":"https://thienluhoan.github.io/workshop-template/3-blogstranslated/","title":"Translated Blogs","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your own report, including this warning.\nThis section will list and introduce the blogs you have translated. For example:\nBlog 1 - OpenAI open weight models now available on AWS On August 5, 2025, AWS announced that two of OpenAI’s latest open-weight models — gpt-oss-120b and gpt-oss-20b — are now accessible through Amazon Bedrock and Amazon SageMaker JumpStart. This release marks a significant milestone, as it’s the first time OpenAI has provided public access to model weights since GPT-2, opening the door to greater flexibility and customization.\nBlog 2 - OpenSecrets uses AWS to transform political transparency through enhanced data matching OpenSecrets is a nonpartisan, independent nonprofit organization whose mission is to serve as the trusted authority on money in American politics. It pursues this mission by providing comprehensive and reliable data, analysis, and tools for policymakers, storytellers, and citizens. Its vision is for Americans to use data on money in politics to create a more vibrant, representative, and responsive democracy.\nBlog 3 - An Analysis of AWS\u0026rsquo;s Leadership in the 2025 Gartner Magic Quadrant Reports As I analyze the recent AWS blog posts detailing their recognition across multiple Gartner Magic Quadrant reports, I find myself reflecting on what truly constitutes cloud leadership in today\u0026rsquo;s rapidly evolving technological landscape. Having closely followed AWS\u0026rsquo;s journey over the past decade, I believe their consistent performance across these evaluations reveals more than just market dominance—it demonstrates a profound understanding of enterprise needs across various domains. In my assessment, achieving leadership status in even one Magic Quadrant is noteworthy, but maintaining this position across five different categories while earning the highest placement in \u0026ldquo;Ability to Execute\u0026rdquo; for Strategic Cloud Platform Services for 15 consecutive years is, in my opinion, unprecedented in the cloud industry. This consistent excellence suggests a deep-rooted culture of customer obsession and innovation that permeates their entire organization.\nBlog 4 - From Flexibility to Framework: Enforcing Tool Order in MCP Servers AWS Amplify has rolled out important updates to its JavaScript library, making it more lightweight and efficient. Key categories such as Auth, Storage, Notifications, and Analytics have seen major reductions in bundle size, which directly translates to faster load times and better performance for developers and their users.\nThese improvements aren’t just technical tweaks—they are the result of listening to the Amplify developer community. By focusing on bundle size optimization and better tree-shaking support, Amplify is making sure that apps built with the library meet modern performance expectations.\nBlog 5 - Multi Agent Collaboration with Strands As autonomous systems evolve, collaboration between multiple agents is moving from theoretical to essential. With agents gaining advanced reasoning, adaptability, and tool use, the question is no longer “Can one agent solve a task?” but “How can many agents work together effectively?”\nBlog 6 - From Flexibility to Framework: Enforcing Tool Order in MCP Servers The Model Context Protocol (MCP) was created to bring consistency to how applications interact with Generative AI models. Instead of piecing together separate integrations for every model or hosting environment, MCP provides a standardized communication layer.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.4-s3-onprem/","title":"Access S3 from on-premises","tags":[],"description":"","content":"Overview In this section, you will create an Interface endpoint to access Amazon S3 from a simulated on-premises environment. The Interface endpoint will allow you to route to Amazon S3 over a VPN connection from your simulated on-premises environment.\nWhy using Interface endpoint:\nGateway endpoints only work with resources running in the VPC where they are created. Interface endpoints work with resources running in VPC, and also resources running in on-premises environments. Connectivty from your on-premises environment to the cloud can be provided by AWS Site-to-Site VPN or AWS Direct Connect. Interface endpoints allow you to connect to services powered by AWS PrivateLink. These services include some AWS services, services hosted by other AWS customers and partners in their own VPCs (referred to as PrivateLink Endpoint Services), and supported AWS Marketplace Partner services. For this workshop, we will focus on connecting to Amazon S3. "},{"uri":"https://thienluhoan.github.io/workshop-template/4-eventparticipated/","title":"Events Participated","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim for your report, including this warning.\nIn this section, you should list and describe in detail the events you have participated in during your internship or work experience.\nEach event should be presented in the format Event 1, Event 2, Event 3…, along with the following details:\nEvent name Date and time Location (if applicable) Your role in the event (attendee, event support, speaker, etc.) A brief description of the event’s content and main activities Outcomes or value gained (lessons learned, new skills, contribution to the team/project) This listing helps demonstrate your actual participation as well as the soft skills and experience you have gained from each event. During my internship, I participated in two events. Each one was a memorable experience that provided new, interesting, and useful knowledge, along with gifts and wonderful moments.\nEvent 1 Event Name: Vietnam Cloud Day 2025 : Ho Chi Minh City Connect Edition for Builders\nDate \u0026amp; Time: 09:00, September 18th, 2025\nLocation: 32th Floor, Bitexco Tower, 02 Hai Trieu Street, Saigon Ward, Ho Chi Minh City\nRole: Attendee\nDescripition: Briefly explain Generative AI, Data Analytics, Migration \u0026amp; Modernization, as well as security to make the system scalable, secure and reliable.\nEvent 2 Event Name: GenAI-powered App-DB Modernization workshop\nDate \u0026amp; Time: 09:00, August 13, 2025\nLocation: 26th Floor, Bitexco Tower, 02 Hai Trieu Street, Saigon Ward, Ho Chi Minh City\nRole: Attendee\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.4-s3-onprem/5.4.4-dns-simulation/","title":"On-premises DNS Simulation","tags":[],"description":"","content":"AWS PrivateLink endpoints have a fixed IP address in each Availability Zone where they are deployed, for the life of the endpoint (until it is deleted). These IP addresses are attached to Elastic Network Interfaces (ENIs). AWS recommends using DNS to resolve the IP addresses for endpoints so that downstream applications use the latest IP addresses when ENIs are added to new AZs, or deleted over time.\nIn this section, you will create a forwarding rule to send DNS resolution requests from a simulated on-premises environment to a Route 53 Private Hosted Zone. This section leverages the infrastructure deployed by CloudFormation in the Prepare the environment section.\nCreate DNS Alias Records for the Interface endpoint Navigate to the Route 53 management console (Hosted Zones section). The CloudFormation template you deployed in the Prepare the environment section created this Private Hosted Zone. Click on the name of the Private Hosted Zone, s3.us-east-1.amazonaws.com: Create a new record in the Private Hosted Zone: Record name and record type keep default options Alias Button: Click to enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Choose endpoint: Paste the Regional VPC Endpoint DNS name from your text editor (you saved when doing section 4.3) Click Add another record, and add a second record using the following values. Click Create records when finished to create both records. Record name: *. Record type: keep default value (type A) Alias Button: Click to enable Route traffic to: Alias to VPC Endpoint Region: US East (N. Virginia) [us-east-1] Choose endpoint: Paste the Regional VPC Endpoint DNS name from your text editor The new records appear in the Route 53 console:\nCreate a Resolver Forwarding Rule Route 53 Resolver Forwarding Rules allow you to forward DNS queries from your VPC to other sources for name resolution. Outside of a workshop environment, you might use this feature to forward DNS queries from your VPC to DNS servers running on-premises. In this section, you will simulate an on-premises conditional forwarder by creating a forwarding rule that forwards DNS queries for Amazon S3 to a Private Hosted Zone running in \u0026ldquo;VPC Cloud\u0026rdquo; in-order to resolve the PrivateLink interface endpoint regional DNS name.\nFrom the Route 53 management console, click Inbound endpoints on the left side bar In the Inbound endpoints console, click the ID of the inbound endpoint Copy the two IP addresses listed to your text editor From the Route 53 menu, choose Resolver \u0026gt; Rules, and click Create rule: In the Create rule console: Name: myS3Rule Rule type: Forward Domain name: s3.us-east-1.amazonaws.com VPC: VPC On-prem Outbound endpoint: VPCOnpremOutboundEndpoint Target IP Addresses: Enter both IP addresses from your text editor (inbound endpoint addresses) and then click Submit You have successfully created resolver forwarding rule.\nTest the on-premises DNS Simulation Connect to Test-Interface-Endpoint EC2 instance with Session manager Test DNS resolution. The dig command will return the IP addresses assigned to the VPC Interface endpoint running in VPC Cloud (your IP\u0026rsquo;s will be different): dig +short s3.us-east-1.amazonaws.com The IP addresses returned are the VPC endpoint IP addresses, NOT the Resolver IP addresses you pasted from your text editor. The IP addresses of the Resolver endpoint and the VPC endpoint look similar because they are all from the VPC Cloud CIDR block.\nNavigate to the VPC menu (Endpoints section), select the S3 Interface endpoint. Click the Subnets tab and verify that the IP addresses returned by Dig match the VPC endpoint: Return to your shell and use the AWS CLI to test listing your S3 buckets: aws s3 ls --endpoint-url https://s3.us-east-1.amazonaws.com Terminate your Session Manager session: In this section you created an Interface endpoint for Amazon S3. This endpoint can be reached from on-premises through Site-to-Site VPN or AWS Direct Connect. Route 53 Resolver outbound endpoints simulated forwarding DNS requests from on-premises to a Private Hosted Zone running the cloud. Route 53 inbound Endpoints recieved the resolution request and returned a response containing the IP addresses of the VPC interface endpoint. Using DNS to resolve the endpoint IP addresses provides high availability in-case of an Availability Zone outage.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.5-policy/","title":"VPC Endpoint Policies","tags":[],"description":"","content":"When you create an interface or gateway endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. A VPC endpoint policy is an IAM resource policy that you attach to an endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service through the endpoint.\nYou can create a policy that restricts access to specific S3 buckets only. This is useful if you only want certain S3 Buckets to be accessible through the endpoint.\nIn this section you will create a VPC endpoint policy that restricts access to the S3 bucket specified in the VPC endpoint policy.\nConnect to an EC2 instance and verify connectivity to S3 Start a new AWS Session Manager session on the instance named Test-Gateway-Endpoint. From the session, verify that you can list the contents of the bucket you created in Part 1: Access S3 from VPC: aws s3 ls s3://\\\u0026lt;your-bucket-name\\\u0026gt; The bucket contents include the two 1 GB files uploaded in earlier.\nCreate a new S3 bucket; follow the naming pattern you used in Part 1, but add a \u0026lsquo;-2\u0026rsquo; to the name. Leave other fields as default and click create Successfully create bucket\nNavigate to: Services \u0026gt; VPC \u0026gt; Endpoints, then select the Gateway VPC endpoint you created earlier. Click the Policy tab. Click Edit policy. The default policy allows access to all S3 Buckets through the VPC endpoint.\nIn Edit Policy console, copy \u0026amp; Paste the following policy, then replace yourbucketname-2 with your 2nd bucket name. This policy will allow access through the VPC endpoint to your new bucket, but not any other bucket in Amazon S3. Click Save to apply the policy. { \u0026#34;Id\u0026#34;: \u0026#34;Policy1631305502445\u0026#34;, \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;Stmt1631305501021\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::yourbucketname-2\u0026#34;, \u0026#34;arn:aws:s3:::yourbucketname-2/*\u0026#34; ], \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34; } ] } Successfully customize policy\nFrom your session on the Test-Gateway-Endpoint instance, test access to the S3 bucket you created in Part 1: Access S3 from VPC aws s3 ls s3://\u0026lt;yourbucketname\u0026gt; This command will return an error because access to this bucket is not permitted by your new VPC endpoint policy:\nReturn to your home directory on your EC2 instance cd~ Create a file fallocate -l 1G test-bucket2.xyz Copy file to 2nd bucket aws s3 cp test-bucket2.xyz s3://\u0026lt;your-2nd-bucket-name\u0026gt; This operation succeeds because it is permitted by the VPC endpoint policy.\nThen we test access to the first bucket by copy the file to 1st bucket aws s3 cp test-bucket2.xyz s3://\u0026lt;your-1st-bucket-name\u0026gt; This command will return an error because access to this bucket is not permitted by your new VPC endpoint policy.\nPart 3 Summary: In this section, you created a VPC endpoint policy for Amazon S3, and used the AWS CLI to test the policy. AWS CLI actions targeted to your original S3 bucket failed because you applied a policy that only allowed access to the second bucket you created. AWS CLI actions targeted for your second bucket succeeded because the policy allowed them. These policies can be useful in situations where you need to control access to resources through VPC endpoints.\n"},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/","title":"Workshop","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nSecure Hybrid Access to S3 using VPC Endpoints Overview AWS PrivateLink provides private connectivity to AWS services from VPCs and your on-premises networks, without exposing your traffic to the Public Internet.\nIn this lab, you will learn how to create, configure, and test VPC endpoints that enable your workloads to reach AWS services without traversing the Public Internet.\nYou will create two types of endpoints to access Amazon S3: a Gateway VPC endpoint, and an Interface VPC endpoint. These two types of VPC endpoints offer different benefits depending on if you are accessing Amazon S3 from the cloud or your on-premises location\nGateway - Create a gateway endpoint to send traffic to Amazon S3 or DynamoDB using private IP addresses.You route traffic from your VPC to the gateway endpoint using route tables. Interface - Create an interface endpoint to send traffic to endpoint services that use a Network Load Balancer to distribute traffic. Traffic destined for the endpoint service is resolved using DNS. Content Workshop overview Prerequiste Access S3 from VPC Access S3 from On-premises VPC Endpoint Policies (Bonus) Clean up "},{"uri":"https://thienluhoan.github.io/workshop-template/5-workshop/5.6-cleanup/","title":"Clean up","tags":[],"description":"","content":"Congratulations on completing this workshop! In this workshop, you learned architecture patterns for accessing Amazon S3 without using the Public Internet.\nBy creating a gateway endpoint, you enabled direct communication between EC2 resources and Amazon S3, without traversing an Internet Gateway. By creating an interface endpoint you extended S3 connectivity to resources running in your on-premises data center via AWS Site-to-Site VPN or Direct Connect. clean up Navigate to Hosted Zones on the left side of Route 53 console. Click the name of s3.us-east-1.amazonaws.com zone. Click Delete and confirm deletion by typing delete. Disassociate the Route 53 Resolver Rule - myS3Rule from \u0026ldquo;VPC Onprem\u0026rdquo; and Delete it. Open the CloudFormation console and delete the two CloudFormation Stacks that you created for this lab: PLOnpremSetup PLCloudSetup Delete S3 buckets Open S3 console Choose the bucket we created for the lab, click and confirm empty. Click delete and confirm delete. "},{"uri":"https://thienluhoan.github.io/workshop-template/6-self-evaluation/","title":"Self-Assessment","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy it verbatim into your report, including this warning.\nDuring my internship at [Company/Organization Name] from [start date] to [end date], I had the opportunity to learn, practice, and apply the knowledge acquired in school to a real-world working environment.\nI participated in [briefly describe the main project or task], through which I improved my skills in [list skills: programming, analysis, reporting, communication, etc.].\nIn terms of work ethic, I always strived to complete tasks well, complied with workplace regulations, and actively engaged with colleagues to improve work efficiency.\nTo objectively reflect on my internship period, I would like to evaluate myself based on the following criteria:\nNo. Criteria Description Good Fair Average 1 Professional knowledge \u0026amp; skills Understanding of the field, applying knowledge in practice, proficiency with tools, work quality ✅ ☐ ☐ 2 Ability to learn Ability to absorb new knowledge and learn quickly ☐ ✅ ☐ 3 Proactiveness Taking initiative, seeking out tasks without waiting for instructions ✅ ☐ ☐ 4 Sense of responsibility Completing tasks on time and ensuring quality ✅ ☐ ☐ 5 Discipline Adhering to schedules, rules, and work processes ☐ ☐ ✅ 6 Progressive mindset Willingness to receive feedback and improve oneself ☐ ✅ ☐ 7 Communication Presenting ideas and reporting work clearly ☐ ✅ ☐ 8 Teamwork Working effectively with colleagues and participating in teams ✅ ☐ ☐ 9 Professional conduct Respecting colleagues, partners, and the work environment ✅ ☐ ☐ 10 Problem-solving skills Identifying problems, proposing solutions, and showing creativity ☐ ✅ ☐ 11 Contribution to project/team Work effectiveness, innovative ideas, recognition from the team ✅ ☐ ☐ 12 Overall General evaluation of the entire internship period ✅ ☐ ☐ Needs Improvement Strengthen discipline and strictly comply with the rules and regulations of the company or any organization Improve problem-solving thinking Enhance communication skills in both daily interactions and professional contexts, including handling situations effectively "},{"uri":"https://thienluhoan.github.io/workshop-template/7-feedback/","title":"Sharing and Feedback","tags":[],"description":"","content":" ⚠️ Note: The information below is for reference purposes only. Please do not copy verbatim for your report, including this warning.\nHere, you can freely share your personal opinions about your experience participating in the First Cloud Journey program. This will help the FCJ team improve any shortcomings based on the following aspects:\nOverall Evaluation 1. Working Environment\nThe working environment is very friendly and open. FCJ members are always willing to help whenever I encounter difficulties, even outside working hours. The workspace is tidy and comfortable, helping me focus better. However, I think it would be nice to have more social gatherings or team bonding activities to strengthen relationships.\n2. Support from Mentor / Team Admin\nThe mentor provides very detailed guidance, explains clearly when I don’t understand, and always encourages me to ask questions. The admin team supports administrative tasks, provides necessary documents, and creates favorable conditions for me to work effectively. I especially appreciate that the mentor allows me to try and solve problems myself instead of just giving the answer.\n3. Relevance of Work to Academic Major\nThe tasks I was assigned align well with the knowledge I learned at university, while also introducing me to new areas I had never encountered before. This allowed me to both strengthen my foundational knowledge and gain practical skills.\n4. Learning \u0026amp; Skill Development Opportunities\nDuring the internship, I learned many new skills such as using project management tools, teamwork skills, and professional communication in a corporate environment. The mentor also shared valuable real-world experiences that helped me better plan my career path.\n5. Company Culture \u0026amp; Team Spirit\nThe company culture is very positive: everyone respects each other, works seriously but still keeps things enjoyable. When there are urgent projects, everyone works together and supports one another regardless of their position. This made me feel like a real part of the team, even as an intern.\n6. Internship Policies / Benefits\nThe company provides an internship allowance and offers flexible working hours when needed. In addition, having the opportunity to join internal training sessions is a big plus.\nAdditional Questions What did you find most satisfying during your internship? What do you think the company should improve for future interns? If recommending to a friend, would you suggest they intern here? Why or why not? Suggestions \u0026amp; Expectations Do you have any suggestions to improve the internship experience? Would you like to continue this program in the future? Any other comments (free sharing): "},{"uri":"https://thienluhoan.github.io/workshop-template/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://thienluhoan.github.io/workshop-template/tags/","title":"Tags","tags":[],"description":"","content":""}]